import{_ as t,p as o,q as c,s,R as n,t as e,Y as p,n as i}from"./framework-a25df3d5.js";const l={},d={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/u014165119/article/details/111355519",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="iframe-跨域" tabindex="-1"><a class="header-anchor" href="#iframe-跨域" aria-hidden="true">#</a> iframe 跨域</h2><p>由于同源策略的限制，使用 <code>iframe</code> 标签引入非同源的资源，在外部操作 <code>iframe</code> 中的 <code>DOM</code> 元素将会被浏览器阻止并报错。<br> 假设有两个域名：<code>blog.sch.com</code>、<code>game.sch.com</code>。</p><p>在 blog 的页面中加载 game 的页面，并操作其中的 <code>DOM</code> 元素。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is outside window.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://game.sch.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> frame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> frameDoc <span class="token operator">=</span> frame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document
        <span class="token comment">// 操作非同源的 iframe 中的 DOM 元素</span>
        frameDoc<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;This is iframe&#39;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器报错如下：</p><blockquote><p>Uncaught DOMException: Blocked a frame with origin &quot;https://game.sch.com&quot; from accessing a cross-origin frame.</p></blockquote><h2 id="解决方案-1-降域" tabindex="-1"><a class="header-anchor" href="#解决方案-1-降域" aria-hidden="true">#</a> 解决方案 1：降域</h2><p>降域是通过将不同域的 <code>document.domain</code> 指定为其共同父域从而使其同源的跨域解决方案。</p><p><code>blog.sch.com</code>、<code>game.sch.com</code> 具有共同的父域 <code>sch.com</code>。</p><p>那么将两个域名下的页面的域修改为 <code>sch.com</code> 即可解决跨域问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">&#39;sch.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ul><li><code>document.domain</code> 指定的域必须为当前域或者其父域。</li><li>子域与父域跨域时，父域也必须指定 <code>document.domain</code>。</li></ul><p><strong>缺点：</strong> 只能用在具有相同父域的情况下。</p><p>那么当两个主域名完全不同时，应该怎么办呢？这就要用到 <code>postMessage</code> 了。</p><h2 id="解决方案2-postmessage" tabindex="-1"><a class="header-anchor" href="#解决方案2-postmessage" aria-hidden="true">#</a> 解决方案2：postMessage</h2><p><code>postMessage</code> 是 <code>HTML5</code> 中新增的函数，可以用来向 <code>window</code> 发送消息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> targetOrigin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>message</strong> 是要发送的消息（可以是对象）。</p><p><strong>targetOrigin</strong> 的值可以是 <code>*</code> 或者一个 <code>URI</code>，用来指定可以接收该消息的域，<code>*</code> 表示可以发送到任意 <code>window</code>，如果 <code>window</code> 的域和 targetOrigin 不配，将不会发送该消息。</p><p>而有发送就会有接收，否则没有任何意义。我们可以通过向 <code>window</code> 添加 <code>message</code> 事件监听器获取发送的消息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> origin<span class="token punctuation">,</span> source<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> event
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>origin</strong> 是消息发送者的域，可以验证消息的发送者是否可被信任。</p><p><strong>source</strong> 是消息发送者的 <code>window</code> 对象，可以使用 <code>source.postMessage</code> 向发送者回传消息。</p><p><strong>data</strong> 是消息内容。</p>`,25);function k(m,v){const a=i("ExternalLinkIcon");return o(),c("div",null,[s("blockquote",null,[s("p",null,[n("转载请注明出处，"),s("a",d,[n("点击此处"),e(a)]),n("可了解 "),s("a",r,[n("StoneHui"),e(a)]),n(" 更多信息")])]),s("p",null,[n("前置知识点： "),s("a",u,[n("同源策略 & 跨域"),e(a)])]),g])}const b=t(l,[["render",k],["__file","jiangyu _ postMessage.html.vue"]]);export{b as default};
