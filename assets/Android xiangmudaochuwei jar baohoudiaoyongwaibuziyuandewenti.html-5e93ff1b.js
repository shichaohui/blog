import{_ as c,p as a,q as i,s as e,R as d,t as r,a0 as t,n}from"./framework-8abcb967.js";const l={},s=t('<p><strong>将一个项目导出为jar包</strong></p><p>很简单，步骤：右键点击目标项目 --&gt; 选择 <code>Export...</code> --&gt; 选择 <code>Java</code> --&gt; 选中 <code>Jar file</code> --&gt; 点击 <code>Next</code> 按钮 --&gt; 将勾选全部去掉只保留 <code>src</code> --&gt; 下面有个框框可以选择导出路径 --&gt; <code>Finish</code>。</p><ul><li>如果项目中没有使用到资源（如图片、布局文件）直接导出即可。</li><li>如果有资源文件那么直接导出也不会报错。但是在使用的时候会报一些 id 找不到之类的错误。</li></ul><p>本文将介绍几种项目导出为 <code>jar</code> 包后仍能调用资源的方式。</p><h2 id="第一种-通过反射动态获取资源-id" tabindex="-1"><a class="header-anchor" href="#第一种-通过反射动态获取资源-id" aria-hidden="true">#</a> 第一种：通过反射动态获取资源 id</h2><p>参考另一篇文章：http://blog.csdn.net/u014165119/article/details/46302695</p><p>把原来的 <code>R.id.×××</code> 、<code>R.layout.×××</code> 等资源 <code>id</code> 获取方式改为 <code>MResource.getViewIdByName(Context context, String name)</code> 、<code>MResource.getLayoutIdByName(Context context, String name)</code> 等方式，之后正常导出 <code>jar</code> 包。使用 <code>jar</code> 包时把资源一起拷贝到新项目对应的位置即可。</p><h2 id="第二种-使用-library-库的方式-1" tabindex="-1"><a class="header-anchor" href="#第二种-使用-library-库的方式-1" aria-hidden="true">#</a> 第二种:使用 library 库的方式（1）</h2><p>只需要把要封装 <code>jar</code> 包的项目改为 <code>library</code>，并在要使用 <code>jar</code> 包的项目中引用此项目，并把 <code>library</code> 中的 <code>AndroidManifest.xml</code> 文件中的内容添加到使用 <code>library</code> 的项目的 <code>AndroidManifest.xml</code> 文件中。</p><p><strong>将普通Android项目变成library：</strong> 右键点击要变的项目 --&gt; 选择 <code>Properties</code> --&gt; 在弹出框的左上角选择 <code>Android</code> --&gt; 勾选 <code>Is Library</code> 单选框 --&gt; <code>OK</code>。</p><p><strong>引用library：</strong> 右键点击要变的项目 --&gt; 选择 <code>Properties</code> --&gt; 在弹出框的左上角选择 <code>Android</code> --&gt; 点击 <code>Add...</code> 按钮 --&gt; 在弹出框中选中要使用的 <code>library</code> --&gt; <code>OK</code>。</p><p>注意：这种方式使用起来比较简单，但是会暴露源码，如果要给其他公司使用就不行了。</p><h2 id="第三种-使用-library-库的方式-2" tabindex="-1"><a class="header-anchor" href="#第三种-使用-library-库的方式-2" aria-hidden="true">#</a> 第三种：使用 library 库的方式（2）</h2><p>步骤：</p><ol><li>把要封装 <code>jar</code> 包的项目设置为 <code>library</code> 库（<code>Is Library</code>）。</li><li>将项目 <code>Clean</code> 一次。步骤：工具栏点击 <code>Project</code> --&gt; 选择 <code>Clean...</code> --&gt; 选中项目 --&gt; <code>OK</code>。</li><li>使用 <code>Export</code> 导出 <code>jar</code> 包（只导出 <code>src</code> 目录下的源码）。</li><li>将导出的 <code>jar</code> 文件复制到项目的 <code>libs</code> 文件夹下，并删除 <code>src</code> 下的源码。</li><li>在使用 <code>library</code> 的项目中 <strong>引用library</strong>。</li><li>把 <code>library</code> 中的 <code>AndroidManifest.xml</code> 文件中的内容添加到使用 <code>library</code> 的项目的 <code>AndroidManifest.xml</code> 文件中。</li></ol><p>这种方式是 <code>library</code> 和 <code>jar</code> 包结合使用，既隐藏了源码，又简单方便。</p><p><strong>注意：</strong> 使用第二、第三中方式时，布局文件等资源的名字在 <code>library</code> 库和引用 <code>library</code> 库的项目中不能有相同的。</p><h2 id="第四种-android-studio-aar文件" tabindex="-1"><a class="header-anchor" href="#第四种-android-studio-aar文件" aria-hidden="true">#</a> 第四种 Android Studio AAR文件</h2>',18),p={href:"http://www.androidchina.net/2467.html",target:"_blank",rel:"noopener noreferrer"},h={href:"http://blog.csdn.net/u013308121/article/details/46717499",target:"_blank",rel:"noopener noreferrer"};function g(b,u){const o=n("ExternalLinkIcon");return a(),i("div",null,[s,e("p",null,[e("a",p,[d("Android Studio 打包及引用AAR"),r(o)])]),e("p",null,[e("a",h,[d("Eclipse 中使用AAR"),r(o)])])])}const _=c(l,[["render",g],["__file","Android xiangmudaochuwei jar baohoudiaoyongwaibuziyuandewenti.html.vue"]]);export{_ as default};
