import{_ as p,p as o,q as c,s as n,R as s,t,Y as e,n as i}from"./framework-a25df3d5.js";const l={},r={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},u=n("h1",{id:"micro-app-使用手册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#micro-app-使用手册","aria-hidden":"true"},"#"),s(" micro-app 使用手册")],-1),d={href:"https://zeroing.jd.com/docs.html#/",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Web Component",-1),v=n("code",null,"Custom Element",-1),m=n("code",null,"Shadow Dom",-1),b=n("code",null,"Web Component",-1),g=n("code",null,"Shadow Dom",-1),h=n("code",null,"micro-app",-1),f=n("code",null,"single-spa",-1),y=n("code",null,"qiankun",-1),w=n("code",null,"Webpack",-1),j=e(`<p><strong>概念图</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1281db88c95e43fa9141f73f3c64a94e~tplv-k3u1fbpfcp-zoom-1.image" alt="概念图"></p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><h3 id="主应用" tabindex="-1"><a class="header-anchor" href="#主应用" aria-hidden="true">#</a> 主应用</h3><p>主应用不限技术栈，只需引入 <code>micro-app</code>、配置子应用路由并启动 <code>micro-app</code> 即可。这里以 <code>Vue3</code> 框架为例。</p><h4 id="安装-micro-app" tabindex="-1"><a class="header-anchor" href="#安装-micro-app" aria-hidden="true">#</a> 安装 <code>micro-app</code></h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @micro-zoe/micro-app

<span class="token function">pnpm</span> <span class="token function">add</span> @micro-zoe/micro-app

<span class="token function">npm</span> i @micro-zoe/micro-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-micro-app" tabindex="-1"><a class="header-anchor" href="#启动-micro-app" aria-hidden="true">#</a> 启动 <code>micro-app</code></h4><p>在应用入口引入并启动 <code>micro-app</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> microApp <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="嵌入子应用" tabindex="-1"><a class="header-anchor" href="#嵌入子应用" aria-hidden="true">#</a> 嵌入子应用</h4><p>创建 Vue 页面（如 <code>src/views/SubApp.vue</code>）用于承载子应用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>micro<span class="token operator">-</span>app name<span class="token operator">=</span><span class="token string">&#39;sub-app&#39;</span> url<span class="token operator">=</span><span class="token string">&#39;http://localhost:8381/&#39;</span> baseroute<span class="token operator">=</span><span class="token string">&#39;/sub-app&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>micro<span class="token operator">-</span>app<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>&lt;micro-app&gt;</code> 组件配置说明：</strong></p>`,14),_=n("li",null,"name: 子应用名称。必须以字母开头，且不可以带有除中划线和下划线外的特殊符号，每个 name 都对应一个应用，当多个应用同时渲染时，name 不可以重复。",-1),x=n("li",null,"url: 子应用地址。会被自动补全，如 http://localhost:3000/index.html。",-1),q=n("li",null,"baseroute: 主应用分配给子应用的基础路由。",-1),A={href:"https://zeroing.jd.com/docs.html#/zh-cn/configure",target:"_blank",rel:"noopener noreferrer"},L=e(`<h4 id="配置子应用路由" tabindex="-1"><a class="header-anchor" href="#配置子应用路由" aria-hidden="true">#</a> 配置子应用路由</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/sub-app/*&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../views/SubApp.vue&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path</code> 是子应用路由地址。非严格匹配，<code>/sub-app/*</code> 都指向 <code>SubApp</code> 页面。使用 <code>vue-router@4.x</code> 时写法为：<code>&#39;/sub-app/:page*&#39;</code>。</p><h3 id="vue2-webpack-子应用" tabindex="-1"><a class="header-anchor" href="#vue2-webpack-子应用" aria-hidden="true">#</a> Vue2 + Webpack 子应用</h3><h4 id="设置基础路由" tabindex="-1"><a class="header-anchor" href="#设置基础路由" aria-hidden="true">#</a> 设置基础路由</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__MICRO_APP_BASE_ROUTE__ <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置跨域支持" tabindex="-1"><a class="header-anchor" href="#配置跨域支持" aria-hidden="true">#</a> 配置跨域支持</h4><p>修改 <code>vue.config.js</code> 配置跨域支持。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@vue/cli-service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue3-vite-子应用" tabindex="-1"><a class="header-anchor" href="#vue3-vite-子应用" aria-hidden="true">#</a> Vue3 + Vite 子应用</h3><p>在嵌入 <code>Vite</code> 子应用时，<code>micro-app</code> 的功能只负责渲染，其它的行为由应用自行决定，这包括如何防止样式、JavaScript 变量、元素的冲突。</p><h4 id="子应用的修改" tabindex="-1"><a class="header-anchor" href="#子应用的修改" aria-hidden="true">#</a> 子应用的修改</h4><ol><li>添加自定义插件</li></ol><ul><li>新建插件 <code>vite-plugin-micro-app.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">function</span> <span class="token function">VitePluginMicroApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> basePath <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vite:micro-app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
    <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      basePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">writeBundle</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> bundle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunkName <span class="token keyword">in</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bundle<span class="token punctuation">,</span> chunkName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> chunk <span class="token operator">=</span> bundle<span class="token punctuation">[</span>chunkName<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunk<span class="token punctuation">.</span>fileName<span class="token operator">?.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chunk<span class="token punctuation">.</span>fileName<span class="token operator">?.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        chunk<span class="token punctuation">.</span>code <span class="token operator">=</span> chunk<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from|import\\()(\\s*[&#39;&quot;])(\\.\\.?\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          all<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>$3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>$3<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">const</span> fullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span>
        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> VitePluginMicroApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入插件并配置公共资源基础路径</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> microAppPlugin <span class="token keyword">from</span> <span class="token string">&#39;./vite-plugin-micro-app&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;/vue3-app/&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">microAppPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>修改容器元素 id</li></ol><ul><li>修改 <code>index.html</code> 中容器元素的 id 值</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-vite-app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用新的 id 渲染</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#my-vite-app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当多个vite子应用同时渲染时，必须修改容器元素的id值，确保每个子应用容器元素id的唯一性，否则无法正常渲染。</p><ol start="3"><li>路由</li></ol><p>推荐基座使用 <code>history</code> 路由，<code>Vite</code> 子应用使用 <code>hash</code> 路由，避免一些可能出现的问题。</p><p>子应用如果是 <code>Vue3</code>，在初始化时路由时，<code>createWebHashHistory</code> 不要传入参数，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>静态资源</li></ol><p>图片等静态资源需要使用绝对地址，可以使用 <code>new URL(&#39;../assets/logo.png&#39;, i<wbr>mport.meta.url).href</code> 等方式获取资源的全链接地址。</p><h4 id="主应用的修改" tabindex="-1"><a class="header-anchor" href="#主应用的修改" aria-hidden="true">#</a> 主应用的修改</h4><ol><li>关闭沙箱并使用内联 script 模式</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>micro<span class="token operator">-</span>app
  name<span class="token operator">=</span><span class="token string">&#39;child-name&#39;</span>
  url<span class="token operator">=</span><span class="token string">&#39;http://localhost:3001/basename/&#39;</span>
  disableSandbox <span class="token comment">// 关闭沙箱</span>
  inline <span class="token comment">// 使用内联script模式</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>处理子应用静态资源</li></ol><p>写一个简易的插件，对开发环境的子应用进行处理，补全静态资源路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// appName 即子应用的 name</span>
      <span class="token literal-property property">appName</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span> <span class="token operator">!==</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> code
          <span class="token punctuation">}</span>
          <span class="token comment">// 这里 basename 需要和子应用vite.config.js中base的配置保持一致</span>
          code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from|import)(\\s*[&#39;&quot;])(\\/basename\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">all</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> all<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/basename/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;子应用域名/basename/&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> code
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react-子应用" tabindex="-1"><a class="header-anchor" href="#react-子应用" aria-hidden="true">#</a> React 子应用</h3><h4 id="设置基础路由-1" tabindex="-1"><a class="header-anchor" href="#设置基础路由-1" aria-hidden="true">#</a> 设置基础路由</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>BrowserRouter basename<span class="token operator">=</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span>__MICRO_APP_BASE_ROUTE__ <span class="token operator">||</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置跨域支持-1" tabindex="-1"><a class="header-anchor" href="#配置跨域支持-1" aria-hidden="true">#</a> 配置跨域支持</h4><ol><li>安装 <code>react-app-rewired</code> <code>customize-cra</code> 依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> react-app-rewired customize-cra

<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> react-app-rewired customize-cra

<span class="token function">npm</span> i <span class="token parameter variable">-D</span> react-app-rewired customize-cra
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>应用根目录添加 <code>config-overrides.js</code> 文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> overrideDevServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;customize-cra&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token function">overrideDevServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>config<span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>修改 <code>package.json</code></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>-   <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-scripts start&quot;</span><span class="token punctuation">,</span>
+   <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-app-rewired start&quot;</span><span class="token punctuation">,</span>
-   <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-scripts build&quot;</span><span class="token punctuation">,</span>
+   <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-app-rewired build&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用间通信" tabindex="-1"><a class="header-anchor" href="#应用间通信" aria-hidden="true">#</a> 应用间通信</h2><p><code>micro-app</code> 提供了一套灵活的数据通信机制，方便主应用和子应用之间的数据传输。</p><p>正常情况下，主应用和子应用之间的通信是绑定的，主应用只能向指定的子应用发送数据，子应用只能向基座发送数据，这种方式可以有效的避免数据污染，防止多个子应用之间相互影响。</p><p>同时 <code>micro-app</code> 也提供了全局通信，方便跨应用之间的数据通信。</p><h3 id="主应用向子应用发送数据" tabindex="-1"><a class="header-anchor" href="#主应用向子应用发送数据" aria-hidden="true">#</a> 主应用向子应用发送数据</h3><p>主应用向子应用发送数据有两种方式。</p><ol><li>通过 <code>data</code> 属性发送数据</li></ol><p>使用 <code>&lt;micro-app&gt;</code> 组件的 <code>data</code> 给子应用发送数据，此时只接受对象类型，数据变化时会自动重新发送。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>micro<span class="token operator">-</span>app name<span class="token operator">=</span><span class="token string">&quot;my-app&quot;</span> url<span class="token operator">=</span><span class="token string">&quot;http://localhost:8381/&quot;</span> baseroute<span class="token operator">=</span><span class="token string">&quot;/my-app&quot;</span> <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">&quot;data&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;通过 data 发送给子应用的数据&#39;</span> <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>手动发送数据</li></ol><p>手动发送数据需要通过 <code>name</code> 指定接受数据的子应用，此值和 <code>&lt;micro-app&gt;</code> 元素中的 <code>name</code> 一致。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 发送数据给子应用 my-app，setData第二个参数只接受对象类型</span>
microApp<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&#39;my-app&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;手动发送给子应用的数据&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子应用接收主应用发送的数据" tabindex="-1"><a class="header-anchor" href="#子应用接收主应用发送的数据" aria-hidden="true">#</a> 子应用接收主应用发送的数据</h3><p><code>micro-app</code> 会向子应用注入名称为 <code>microApp</code> 的全局对象，子应用通过这个对象有两种方式获取来自主应用的数据。</p><ol><li>直接获取</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取主应用下发的 data 数据</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>绑定监听函数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dataListener</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;来自主应用的数据&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 绑定监听函数，监听函数只有在数据变化时才会触发
 * dataListener: 绑定函数
 * autoTrigger: 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次，默认为 false
 * !!!重要说明: 因为子应用是异步渲染的，而基座发送数据是同步的，
 * 如果在子应用渲染结束前主应用发送数据，则在绑定监听函数前数据已经发送，在初始化后不会触发绑定函数，
 * 但这个数据会放入缓存中，此时可以设置 autoTrigger 为 true 主动触发一次监听函数来获取数据。
 */</span>
window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">addDataListener</span><span class="token punctuation">(</span>dataListener<span class="token operator">:</span> Function<span class="token punctuation">,</span> autoTrigger<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span>

<span class="token comment">// 解绑监听函数</span>
window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">removeDataListener</span><span class="token punctuation">(</span>dataListener<span class="token operator">:</span> Function<span class="token punctuation">)</span>

<span class="token comment">// 清空当前子应用的所有绑定函数(全局数据函数除外)</span>
window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">clearDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子应用向主应用发送数据" tabindex="-1"><a class="header-anchor" href="#子应用向主应用发送数据" aria-hidden="true">#</a> 子应用向主应用发送数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// dispatch只接受对象作为参数</span>
window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;子应用发送的数据&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主应用接收子应用发送的数据" tabindex="-1"><a class="header-anchor" href="#主应用接收子应用发送的数据" aria-hidden="true">#</a> 主应用接收子应用发送的数据</h3><p>主应用获取来自子应用的数据有三种方式。</p><ol><li>直接获取数据</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取指定子应用发送的数据</span>
<span class="token keyword">const</span> childData <span class="token operator">=</span> microApp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>监听 <code>datachange</code> 事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>micro<span class="token operator">-</span>app name<span class="token operator">=</span><span class="token string">&quot;my-app&quot;</span> url<span class="token operator">=</span><span class="token string">&quot;http://localhost:8381/&quot;</span> baseroute<span class="token operator">=</span><span class="token string">&quot;/my-app&quot;</span> @datachange<span class="token operator">=</span><span class="token string">&quot;handleDataChange&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>绑定监听函数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dataListener</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;来自子应用的数据&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 绑定监听函数
 * appName: 应用名称
 * dataListener: 绑定函数
 * autoTrigger: 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次，默认为false
 */</span>
microApp<span class="token punctuation">.</span><span class="token function">addDataListener</span><span class="token punctuation">(</span>appName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">dataListener</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> autoTrigger<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span>

<span class="token comment">// 解绑监听my-app子应用的函数</span>
microApp<span class="token punctuation">.</span><span class="token function">removeDataListener</span><span class="token punctuation">(</span>appName<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">dataListener</span><span class="token operator">:</span> Function<span class="token punctuation">)</span>

<span class="token comment">// 清空所有监听appName子应用的函数</span>
microApp<span class="token punctuation">.</span><span class="token function">clearDataListener</span><span class="token punctuation">(</span>appName<span class="token operator">:</span> string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局数据通信" tabindex="-1"><a class="header-anchor" href="#全局数据通信" aria-hidden="true">#</a> 全局数据通信</h3><p>全局数据通信会向主应用和所有子应用发送数据，在跨应用通信的场景中适用。</p><h4 id="发送全局数据" tabindex="-1"><a class="header-anchor" href="#发送全局数据" aria-hidden="true">#</a> 发送全局数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// setGlobalData 只接受对象作为参数</span>
microApp<span class="token punctuation">.</span><span class="token function">setGlobalData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;全局数据&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取全局数据" tabindex="-1"><a class="header-anchor" href="#获取全局数据" aria-hidden="true">#</a> 获取全局数据</h4><ol><li>直接获取数据</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> globalData <span class="token operator">=</span> window<span class="token punctuation">.</span>microApp<span class="token punctuation">.</span><span class="token function">getGlobalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>绑定监听函数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">dataListener</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
microApp<span class="token punctuation">.</span><span class="token function">addGlobalDataListener</span><span class="token punctuation">(</span>dataListener<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭沙箱后的通信方式" tabindex="-1"><a class="header-anchor" href="#关闭沙箱后的通信方式" aria-hidden="true">#</a> 关闭沙箱后的通信方式</h3><p>沙箱关闭后，子应用默认的通信功能失效，此时可以通过手动注册通信对象实现一致的功能。</p><p><strong>注册方式：在主应用中为子应用初始化通信对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventCenterForMicroApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

<span class="token comment">// 注意：每个子应用根据 appName 单独分配一个通信对象</span>
window<span class="token punctuation">.</span>eventCenterForAppxx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventCenterForMicroApp</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>子应用通信方式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直接获取数据</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> window<span class="token punctuation">.</span>eventCenterForAppxx<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">function</span> <span class="token function">dataListener</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;来自主应用的数据&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 绑定监听函数
 * dataListener: 绑定函数
 * autoTrigger: 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次，默认为 false
 */</span>
window<span class="token punctuation">.</span>eventCenterForAppxx<span class="token punctuation">.</span><span class="token function">addDataListener</span><span class="token punctuation">(</span>dataListener<span class="token operator">:</span> Function<span class="token punctuation">,</span> autoTrigger<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span>

<span class="token comment">// 解绑监听函数</span>
window<span class="token punctuation">.</span>eventCenterForAppxx<span class="token punctuation">.</span><span class="token function">removeDataListener</span><span class="token punctuation">(</span>dataListener<span class="token operator">:</span> Function<span class="token punctuation">)</span>

<span class="token comment">// 清空当前子应用的所有绑定函数(全局数据函数除外)</span>
window<span class="token punctuation">.</span>eventCenterForAppxx<span class="token punctuation">.</span><span class="token function">clearDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 子应用向主应用发送数据，只接受对象作为参数</span>
window<span class="token punctuation">.</span>eventCenterForAppxx<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;子应用发送的数据&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="webpack-public-path-无效-静态资源路径错误。" tabindex="-1"><a class="header-anchor" href="#webpack-public-path-无效-静态资源路径错误。" aria-hidden="true">#</a> <code>__webpack_public_path__</code> 无效，静态资源路径错误。</h3><p>将 <code>public-path.js</code> 的导入语句放在应用入口文件的第一行。</p><h3 id="typescript-cannot-find-name-webpack-public-path-。" tabindex="-1"><a class="header-anchor" href="#typescript-cannot-find-name-webpack-public-path-。" aria-hidden="true">#</a> TypeScript cannot find name <code>__webpack_public_path__</code>。</h3><p>在 <code>src</code> 目录新增 <code>global.d.ts</code> 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>declare <span class="token keyword">let</span> <span class="token literal-property property">__webpack_public_path__</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">__MICRO_APP_BASE_ROUTE__</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">__MICRO_APP_PUBLIC_PATH__</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">__MICRO_APP_ENVIRONMENT__</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react18-子应用首次进入展示空白-再次进入正常。" tabindex="-1"><a class="header-anchor" href="#react18-子应用首次进入展示空白-再次进入正常。" aria-hidden="true">#</a> React18 子应用首次进入展示空白，再次进入正常。</h3><p>在 <code>React18</code> 项目中使用 <code>@rescripts/cli</code> 修改 <code>Webpack</code> 配置可能会导致 <code>micro-app</code> 首次进入 <code>React18</code> 子应用时展示空白。</p><p>将 <code>@rescripts/cli</code> 替换为 <code>react-app-rewired</code> <code>customize-cra</code> 即可。</p><h3 id="configuration-output-has-an-unknown-property-jsonpfunction" tabindex="-1"><a class="header-anchor" href="#configuration-output-has-an-unknown-property-jsonpfunction" aria-hidden="true">#</a> configuration.output has an unknown property &#39;jsonpFunction&#39;.</h3><p>将 <code>output.jsonpFunction</code> 更名为 <code>output.chunkLoadingGlobal​​​​​​​</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// jsonpFunction: \`webpackJsonp_\${name}\`,</span>
<span class="token literal-property property">chunkLoadingGlobal</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子应用内部路由跳转后无法切换到主应用或其他子应用且路由栈异常。" tabindex="-1"><a class="header-anchor" href="#子应用内部路由跳转后无法切换到主应用或其他子应用且路由栈异常。" aria-hidden="true">#</a> 子应用内部路由跳转后无法切换到主应用或其他子应用且路由栈异常。</h3><ul><li><code>Vue</code> 通过路由守卫更新 <code>state</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Vue2</span>
  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">current</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Vue3</span>
  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>location<span class="token punctuation">.</span>pathname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>location<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>React</code> 通过轮询监听路由变化更新 <code>state</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">listenRouterChange</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> oldHref <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">!==</span> oldHref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldHref <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">listenRouterChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">current</span><span class="token operator">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105);function D(R,C){const a=i("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("p",null,[n("small",null,[s("转载请注明出处，"),n("a",r,[s("点击此处"),t(a)]),s(" 查看更多精彩内容")])])]),u,n("p",null,[n("a",d,[s("micro-app"),t(a)]),s(" 是借鉴了 "),k,s(" 的思想，通过 "),v,s(" 结合自定义的 "),m,s("，将微前端封装成一个类 "),b,s(" 组件，从而实现微前端的组件化渲染。并且由于自定义 "),g,s(" 的隔离特性，"),h,s(" 不需要像 "),f,s(" 和 "),y,s(" 一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改 "),w,s(" 配置，是目前市面上接入微前端成本最低的方案。")]),j,n("ul",null,[_,x,q,n("li",null,[n("a",A,[s("查看更多子应用配置"),t(a)])])]),L])}const P=p(l,[["render",D],["__file","weiqianduan（micro-app）shiyongshouce.html.vue"]]);export{P as default};
