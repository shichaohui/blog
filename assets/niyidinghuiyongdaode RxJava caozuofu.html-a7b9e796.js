import{_ as p,p as o,q as l,s as n,R as a,t as e,Y as t,n as c}from"./framework-a25df3d5.js";const i={},u={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"参考文档：",-1),v={href:"http://reactivex.io/RxJava/javadoc",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.gitbook.com/book/mcxiaoke/rxdocs/details",target:"_blank",rel:"noopener noreferrer"},m=n("hr",null,null,-1),h={id:"_1-observable-的创建",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_1-observable-的创建","aria-hidden":"true"},"#",-1),f={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"_1-1-from",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-from","aria-hidden":"true"},"#"),a(" 1.1 from( )")],-1),x={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[n("strong",null,"方法列表：")],-1),T={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)",target:"_blank",rel:"noopener noreferrer"},j={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},w={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},y={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)",target:"_blank",rel:"noopener noreferrer"},R={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)",target:"_blank",rel:"noopener noreferrer"},S=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 遍历集合</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 使用 Future 创建 Observable，Future 表示一个异步计算的结果。</span>
<span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO 执行异步操作并返回数据</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hihi&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Scheduler<span class="token punctuation">.</span>Worker</span> worker <span class="token operator">=</span> <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        futureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-just" tabindex="-1"><a class="header-anchor" href="#_1-2-just" aria-hidden="true">#</a> 1.2 just( )</h3>`,4),J={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,[n("strong",null,"方法列表：")],-1),U={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)",target:"_blank",rel:"noopener noreferrer"},I={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T)",target:"_blank",rel:"noopener noreferrer"},L={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},q={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},E={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},C={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},N={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},B={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},D={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},M={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},W=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 just() 遍历几个元素</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
<span class="token comment">// 使用 from() 方法遍历，效果和 just() 一样。</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>stringArrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>just()</code> 方法可传入 1~10 个参数，也就说当元素个数小于等于 10 的时候既可以使用 <code>just() </code> 也可以使用 <code>from()</code>，否则只能用 <code>from()</code> 方法。</p><h3 id="_1-3-create" tabindex="-1"><a class="header-anchor" href="#_1-3-create" aria-hidden="true">#</a> 1.3 create( )</h3>`,4),A=n("code",null,"OnSubscribe",-1),V={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,[n("strong",null,"方法列表：")],-1),H={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.Observable.OnSubscribe)",target:"_blank",rel:"noopener noreferrer"},X={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.observables.SyncOnSubscribe)",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.observables.AsyncOnSubscribe)",target:"_blank",rel:"noopener noreferrer"},G=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> onSubscribe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// onNext() 方法可执行多次</span>
        subscribe<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscribe<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法不常用，大多数时候都是使用 <code>just( )</code>、<code>form( )</code> 等方法，如上面那串代码就可以写成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-interval" tabindex="-1"><a class="header-anchor" href="#_1-4-interval" aria-hidden="true">#</a> 1.4 interval( )</h3>`,5),K={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,[n("strong",null,"方法列表：")],-1),Q={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Z={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},$={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},nn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},an=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每隔 1 s 发送一个序列号，序列号从 0 开始，每次累加 1。</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-timer" tabindex="-1"><a class="header-anchor" href="#_1-5-timer" aria-hidden="true">#</a> 1.5 timer( )</h3>`,3),sn=n("span",{color:"#999999"}," 固定值：0 ",-1),en={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},tn=n("p",null,[n("strong",null,"方法列表：")],-1),pn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},on={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定时 3 s</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-range" tabindex="-1"><a class="header-anchor" href="#_1-6-range" aria-hidden="true">#</a> 1.6 range( )</h3>`,3),cn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,[n("strong",null,"方法列表：")],-1),rn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 依次发射 5、6、7</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-empty" tabindex="-1"><a class="header-anchor" href="#_1-7-empty" aria-hidden="true">#</a> 1.7 empty()</h3>`,3),vn=n("code",null,"onCompleted()",-1),bn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},mn=n("p",null,[n("strong",null,"方法列表：")],-1),hn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()",target:"_blank",rel:"noopener noreferrer"},gn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发出一个 onCompleted() 通知</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-error" tabindex="-1"><a class="header-anchor" href="#_1-8-error" aria-hidden="true">#</a> 1.8 error( )</h3>`,3),fn=n("code",null,"onError",-1),_n={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},xn=n("p",null,[n("strong",null,"方法列表：")],-1),On={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)",target:"_blank",rel:"noopener noreferrer"},Tn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发出一个 onError() 通知</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-never" tabindex="-1"><a class="header-anchor" href="#_1-9-never" aria-hidden="true">#</a> 1.9 never()</h3>`,3),jn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},wn=n("p",null,[n("strong",null,"方法列表：")],-1),yn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-10-defer" tabindex="-1"><a class="header-anchor" href="#_1-10-defer" aria-hidden="true">#</a> 1.10 defer( )</h3>`,3),Sn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Jn=n("p",null,[n("strong",null,"方法列表：")],-1),Fn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defer(rx.functions.Func0)",target:"_blank",rel:"noopener noreferrer"},Un=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-重做" tabindex="-1"><a class="header-anchor" href="#_2-重做" aria-hidden="true">#</a> 2 重做</h2><h3 id="_2-1-repeat" tabindex="-1"><a class="header-anchor" href="#_2-1-repeat" aria-hidden="true">#</a> 2.1 repeat( )</h3><p>使Observable 对象在发出 <code>onNext()</code> 通知之后重复发射数据。重做结束才会发出 <code>onComplete()</code> 通知，若重做过程中出现异常则会中断并发出 <code>onError()</code> 通知。</p><p><strong>方法列表：</strong></p>`,6),In={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()",target:"_blank",rel:"noopener noreferrer"},Ln={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)",target:"_blank",rel:"noopener noreferrer"},qn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},En={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无限重复执行</span>
observable<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重复执行 5 次</span>
observable<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-repeatwhen" tabindex="-1"><a class="header-anchor" href="#_2-2-repeatwhen" aria-hidden="true">#</a> 2.2 repeatWhen( )</h3><p>使Observable 对象在发出 <code>onNext()</code> 通知之后有条件的重复发射数据。重做结束才会发出 <code>onCompleted()</code> 通知，若重做过程中出现异常则会中断并发出 <code>onError()</code> 通知。</p><p><strong>方法列表：</strong></p>`,5),Nn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Bn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Dn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>observable<span class="token punctuation">.</span><span class="token function">repeatWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重复 3 次, 每次间隔 1 s</span>
        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Void</span> aVoid<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-重试" tabindex="-1"><a class="header-anchor" href="#_3-重试" aria-hidden="true">#</a> 3 重试</h2><h3 id="_3-1-retry" tabindex="-1"><a class="header-anchor" href="#_3-1-retry" aria-hidden="true">#</a> 3.1 retry( )</h3>`,4),Mn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"onError()",-1),An={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"onNext()",-1),zn=n("code",null,"onCompleted()",-1),Hn=n("code",null,"onError()",-1),Xn=n("p",null,[n("strong",null,"方法列表：")],-1),Yn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()",target:"_blank",rel:"noopener noreferrer"},Gn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)",target:"_blank",rel:"noopener noreferrer"},Kn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;.......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无限次的重试</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重试 3 次</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用谓语函数决定是否重试</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 参数 integer 是订阅的次数; 参数 throwable 是抛出的异常</span>
        <span class="token comment">// 返回值为 true 表示重试, 返回值为 false 表示不重试</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-retrywhen" tabindex="-1"><a class="header-anchor" href="#_3-2-retrywhen" aria-hidden="true">#</a> 3.2 retryWhen( )</h3><p><strong>作用：</strong> 有条件的执行重试。</p><p><strong>方法列表：</strong></p>`,5),Qn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Zn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},$n=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 重试 3 次，每次间隔 1 s</span>
observable<span class="token punctuation">.</span><span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-变换" tabindex="-1"><a class="header-anchor" href="#_4-变换" aria-hidden="true">#</a> 4 变换</h2><h3 id="_4-1-map" tabindex="-1"><a class="header-anchor" href="#_4-1-map" aria-hidden="true">#</a> 4.1 map( )</h3>`,4),na={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},aa=n("p",null,[n("strong",null,"方法列表：")],-1),sa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},ea=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据的两倍为: %s&quot;</span><span class="token punctuation">,</span> integer <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-flatmap" tabindex="-1"><a class="header-anchor" href="#_4-2-flatmap" aria-hidden="true">#</a> 4.2 flatMap( )</h3>`,3),ta={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},pa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},oa=n("p",null,[n("strong",null,"方法列表：")],-1),la={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},ca={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)",target:"_blank",rel:"noopener noreferrer"},ia={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)",target:"_blank",rel:"noopener noreferrer"},ua={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)",target:"_blank",rel:"noopener noreferrer"},ra={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)",target:"_blank",rel:"noopener noreferrer"},ka={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)",target:"_blank",rel:"noopener noreferrer"},da=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 转换为一个定时 integer 秒的 Observable 对象</span>
                <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-过滤" tabindex="-1"><a class="header-anchor" href="#_5-过滤" aria-hidden="true">#</a> 5 过滤</h2><h3 id="_5-1-filter" tabindex="-1"><a class="header-anchor" href="#_5-1-filter" aria-hidden="true">#</a> 5.1 filter( )</h3><p>只发射满足指定谓词的元素。</p><p><strong>方法列表：</strong></p>`,6),va={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},ba=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-first" tabindex="-1"><a class="header-anchor" href="#_5-2-first" aria-hidden="true">#</a> 5.2 first( )</h3>`,3),ma={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ha={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ga={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},fa=n("code",null,"NoSuchElementException",-1),_a=n("p",null,[n("strong",null,"方法列表：")],-1),xa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()",target:"_blank",rel:"noopener noreferrer"},Oa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Ta=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发射第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发射满足条件的第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 会抛出 NoSuchElementException 异常</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-last" tabindex="-1"><a class="header-anchor" href="#_5-3-last" aria-hidden="true">#</a> 5.3 last( )</h3>`,3),ja={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},wa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ya={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ra=n("code",null,"NoSuchElementException",-1),Sa=n("p",null,[n("strong",null,"方法列表：")],-1),Ja={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()",target:"_blank",rel:"noopener noreferrer"},Fa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Ua=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发射倒数第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发射满足条件的倒数第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 会抛出 NoSuchElementException 异常</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-skip" tabindex="-1"><a class="header-anchor" href="#_5-4-skip" aria-hidden="true">#</a> 5.4 skip( )</h3><p>跳过前面指定数量或指定时间内的元素，只发射后面的元素。</p><p><strong>方法列表：</strong></p>`,5),Ia={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)",target:"_blank",rel:"noopener noreferrer"},La={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},qa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Ea=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 跳过前两条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-skiplast" tabindex="-1"><a class="header-anchor" href="#_5-5-skiplast" aria-hidden="true">#</a> 5.5 skipLast( )</h3>`,3),Ca={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Na=n("p",null,[n("strong",null,"方法列表：")],-1),Ba={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)",target:"_blank",rel:"noopener noreferrer"},Da={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Ma={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Wa=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 跳过后两条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-take" tabindex="-1"><a class="header-anchor" href="#_5-6-take" aria-hidden="true">#</a> 5.6 take( )</h3><p>只发射前面指定数量或指定时间内的元素。</p><p><strong>方法列表：</strong></p>`,5),Aa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)",target:"_blank",rel:"noopener noreferrer"},Va={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},za={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Ha=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只发射前三条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-7-takelast" tabindex="-1"><a class="header-anchor" href="#_5-7-takelast" aria-hidden="true">#</a> 5.7 takeLast( )</h3>`,3),Xa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ya=n("p",null,[n("strong",null,"方法列表：")],-1),Ga={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)",target:"_blank",rel:"noopener noreferrer"},Ka={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Pa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Qa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Za={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},$a=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeLast</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只发射后三条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-8-sample" tabindex="-1"><a class="header-anchor" href="#_5-8-sample" aria-hidden="true">#</a> 5.8 sample( )</h3>`,3),ns={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},as=n("p",null,[n("strong",null,"方法列表：")],-1),ss={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},es={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},ts={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)",target:"_blank",rel:"noopener noreferrer"},ps=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-9-elementat" tabindex="-1"><a class="header-anchor" href="#_5-9-elementat" aria-hidden="true">#</a> 5.9 elementAt( )</h3><p>只发射指定索引的元素。</p><p><strong>方法列表：</strong></p>`,5),os={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)",target:"_blank",rel:"noopener noreferrer"},ls=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发射索引为 2 的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-10-elementatordefault" tabindex="-1"><a class="header-anchor" href="#_5-10-elementatordefault" aria-hidden="true">#</a> 5.10 elementAtOrDefault( )</h3><p>只发射指定索引的元素，若该索引对应的元素不存在，则发射默认值。</p><p><strong>方法列表：</strong></p>`,5),cs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)",target:"_blank",rel:"noopener noreferrer"},is=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elementAtOrDefault</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发射索引为 9的数据，若不存在，则发射 -5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-11-ignoreelements" tabindex="-1"><a class="header-anchor" href="#_5-11-ignoreelements" aria-hidden="true">#</a> 5.11 ignoreElements( )</h3><p>不发射任何数据，直接发出 <code>onCompleted()</code> 通知。</p><p><strong>方法列表：</strong></p>`,5),us={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()",target:"_blank",rel:"noopener noreferrer"},rs=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-12-distinct" tabindex="-1"><a class="header-anchor" href="#_5-12-distinct" aria-hidden="true">#</a> 5.12 distinct( )</h3><p>过滤重复的元素，过滤规则是：只允许还没有发射过的元素通过。</p><p><strong>方法列表：</strong></p>`,5),ks={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct()",target:"_blank",rel:"noopener noreferrer"},ds={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},vs=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接过滤</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过生成的 key 值过滤</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 随机生成 key</span>
        <span class="token keyword">return</span> integer <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-13-debounce" tabindex="-1"><a class="header-anchor" href="#_5-13-debounce" aria-hidden="true">#</a> 5.13 debounce( )</h3>`,3),bs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ms=n("p",null,[n("strong",null,"方法列表：")],-1),hs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},gs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},fs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},_s=t(`<p><strong>栗子：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//产生结果的间隔时间分别为100、200、300...900毫秒</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subscriber<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observable<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>  <span class="token comment">// 超时时间为400毫秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该栗子产生结果为：依次打印5、6、7、8。</p><h2 id="附-功能实现" tabindex="-1"><a class="header-anchor" href="#附-功能实现" aria-hidden="true">#</a> 附：功能实现</h2><h3 id="延时遍历" tabindex="-1"><a class="header-anchor" href="#延时遍历" aria-hidden="true">#</a> 延时遍历</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 遍历</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> traverseObservable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计时</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> intervalObservable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> func2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Long</span> aLong<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

intervalObservable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span>traverseObservable<span class="token punctuation">,</span> func2<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;onCompleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="倒计时" tabindex="-1"><a class="header-anchor" href="#倒计时" aria-hidden="true">#</a> 倒计时</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> startTime <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>startTime <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 接收 startTime + 1 次</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1 2 3...转换为...3 2 1</span>
                <span class="token keyword">return</span> startTime <span class="token operator">-</span> time<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时出现异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">Long</span> aLong<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时: %s s&quot;</span><span class="token punctuation">,</span> aLong<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function xs(Os,Ts){const s=c("ExternalLinkIcon");return o(),l("div",null,[n("blockquote",null,[n("p",null,[a("转载请注明出处，"),n("a",u,[a("点击此处"),e(s)]),a("可了解 "),n("a",r,[a("StoneHui"),e(s)]),a(" 更多信息")])]),n("p",null,[n("strong",null,[a("阅读本文前请先了解 "),n("a",k,[a("RxJava"),e(s)]),a(" 的基本使用。")])]),d,n("ul",null,[n("li",null,[n("a",v,[a("RxJava JavaDoc"),e(s)])]),n("li",null,[n("a",b,[a("ReactiveX 文档中文翻译"),e(s)])])]),m,n("h2",h,[g,a(" 1 "),n("a",f,[a("Observable"),e(s)]),a(" 的创建")]),_,n("p",null,[a("转换集合为一个每次发射集合中一个元素的 "),n("a",x,[a("Observable"),e(s)]),a(" 对象。可用来遍历集合。")]),O,n("ul",null,[n("li",null,[n("p",null,[n("a",T,[a("public static <T> Observable<T> from(Future<? extends T> future)"),e(s)])])]),n("li",null,[n("p",null,[n("a",j,[a("public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",w,[a("public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",y,[a("public static <T> Observable<T> from(Iterable<? extends T> iterable)"),e(s)])])]),n("li",null,[n("p",null,[n("a",R,[a("public static <T> Observable<T> from(T[] array)"),e(s)])])])]),S,n("p",null,[a("转换一个或多个 Object 为依次发射这些 Object 的 "),n("a",J,[a("Observable"),e(s)]),a(" 对象。")]),F,n("ul",null,[n("li",null,[n("p",null,[n("a",U,[a("public static <T> Observable<T> just(final T value)"),e(s)])])]),n("li",null,[n("p",null,[n("a",I,[a("public static <T> Observable<T> just(T t1, T t2)"),e(s)])])]),n("li",null,[n("p",null,[n("a",L,[a("public static <T> Observable<T> just(T t1, T t2, T t3)"),e(s)])])]),n("li",null,[n("p",null,[n("a",q,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4)"),e(s)])])]),n("li",null,[n("p",null,[n("a",E,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5)"),e(s)])])]),n("li",null,[n("p",null,[n("a",C,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6)"),e(s)])])]),n("li",null,[n("p",null,[n("a",N,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7)"),e(s)])])]),n("li",null,[n("p",null,[n("a",B,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8)"),e(s)])])]),n("li",null,[n("p",null,[n("a",D,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9)"),e(s)])])]),n("li",null,[n("p",null,[n("a",M,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10)"),e(s)])])])]),W,n("p",null,[a("返回一个在被 "),A,a(" 订阅时执行特定方法的 "),n("a",V,[a("Observable"),e(s)]),a(" 对象。")]),z,n("ul",null,[n("li",null,[n("p",null,[n("a",H,[a("public static <T> Observable<T> create(OnSubscribe<T> f)"),e(s)])])]),n("li",null,[n("p",null,[n("a",X,[a("@Beta public static <S, T> Observable<T>create(SyncOnSubscribe<S, T> syncOnSubscribe)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Y,[a("@Experimental public static <S, T> Observable<T> create(AsyncOnSubscribe<S, T> asyncOnSubscribe)"),e(s)])])])]),G,n("p",null,[a("返回一个每隔指定的时间间隔就发射一个序列号的 "),n("a",K,[a("Observable"),e(s)]),a(" 对象，可用来做倒计时等操作。")]),P,n("ul",null,[n("li",null,[n("p",null,[n("a",Q,[a("public static Observable<Long> interval(long interval, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Z,[a("public static Observable<Long> interval(long interval, TimeUnit unit, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",$,[a("public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",nn,[a("public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),an,n("p",null,[a("创建一个在指定延迟时间后发射一条数据（"),sn,a("）的 "),n("a",en,[a("Observable"),e(s)]),a(" 对象，可用来做定时操作。")]),tn,n("ul",null,[n("li",null,[n("p",null,[n("a",pn,[a("public static Observable<Long> timer(long delay, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",on,[a("public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),ln,n("p",null,[a("创建一个发射指定范围内的连续整数的 "),n("a",cn,[a("Observable"),e(s)]),a(" 对象。")]),un,n("ul",null,[n("li",null,[n("p",null,[n("a",rn,[a("public static Observable<Integer> range(int start, int count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",kn,[a("public static Observable<Integer> range(int start, int count, Scheduler scheduler)"),e(s)])])])]),dn,n("p",null,[a("创建一个不发射任何数据就发出 "),vn,a(" 通知的 "),n("a",bn,[a("Observable"),e(s)]),a(" 对象。")]),mn,n("ul",null,[n("li",null,[n("a",hn,[a("public static <T> Observable<T> empty()"),e(s)])])]),gn,n("p",null,[a("创建不发射任何数据就发出 "),fn,a(" 通知的 "),n("a",_n,[a("Observable"),e(s)]),a(" 对象。")]),xn,n("ul",null,[n("li",null,[n("a",On,[a("public static <T> Observable<T> error(Throwable exception)"),e(s)])])]),Tn,n("p",null,[a("创建一个不发射任何数据和通知的 "),n("a",jn,[a("Observable"),e(s)]),a(" 对象。")]),wn,n("ul",null,[n("li",null,[n("a",yn,[a("public static <T> Observable<T> never()"),e(s)])])]),Rn,n("p",null,[a("在订阅的时候才会创建 Observable 对象；每一次订阅都创建一个新的 "),n("a",Sn,[a("Observable"),e(s)]),a(" 对象。")]),Jn,n("ul",null,[n("li",null,[n("a",Fn,[a("public static <T> Observable<T> defer(Func0<Observable<T>> observableFactory)"),e(s)])])]),Un,n("ul",null,[n("li",null,[n("p",null,[n("a",In,[a("public final Observable<T> repeat()"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ln,[a("public final Observable<T> repeat(final long count) "),e(s)])])]),n("li",null,[n("p",null,[n("a",qn,[a("public final Observable<T> repeat(Scheduler scheduler) "),e(s)])])]),n("li",null,[n("p",null,[n("a",En,[a("public final Observable<T> repeat(final long count, Scheduler scheduler)"),e(s)])])])]),Cn,n("ul",null,[n("li",null,[n("p",null,[n("a",Nn,[a("public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Bn,[a("public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable>?> notificationHandler, Scheduler scheduler)"),e(s)])])])]),Dn,n("p",null,[a("在执行 "),n("a",Mn,[a("Observable"),e(s)]),a("对象的序列出现异常时，不直接发出 "),Wn,a(" 通知，而是重新订阅该 "),n("a",An,[a("Observable"),e(s)]),a("对象，直到重做过程中未出现异常，则会发出 "),Vn,a(" 和 "),zn,a(" 通知；若重做过程中也出现异常，则会继续重试，直到达到重试次数上限，超出次数后发出最新的 "),Hn,a(" 通知。")]),Xn,n("ul",null,[n("li",null,[n("p",null,[n("a",Yn,[a("public final Observable<T> retry()"),e(s)])])]),n("li",null,[n("p",null,[n("a",Gn,[a("public final Observable<T> retry(final long count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Kn,[a("public final Observable<T> retry(Func2<Integer, Throwable, Boolean> predicate)"),e(s)])])])]),Pn,n("ul",null,[n("li",null,[n("p",null,[n("a",Qn,[a("public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Zn,[a("public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>>notificationHandler, Scheduler scheduler)"),e(s)])])])]),$n,n("p",null,[a("把源 "),n("a",na,[a("Observable"),e(s)]),a(" 发射的元素应用于指定的函数，并发送该函数的结果。")]),aa,n("ul",null,[n("li",null,[n("a",sa,[a("public final <R> Observable<R> map(Func1<? super T, ? extends R> func)"),e(s)])])]),ea,n("p",null,[a("转换源 "),n("a",ta,[a("Observable"),e(s)]),a(" 对象为另一个 "),n("a",pa,[a("Observable"),e(s)]),a(" 对象。")]),oa,n("ul",null,[n("li",null,[n("p",null,[n("a",la,[a("public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ca,[a("@Beta public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func, int maxConcurrent)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ia,[a("public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ua,[a("@Beta public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted, int maxConcurrent)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ra,[a("public final <U, R> Observable<R> flatMap(final Func1<? super T, ? extends Observable<? extends U>> collectionSelector, final Func2<? super T, ? super U, ? extends R> resultSelector)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ka,[a("@Beta public final <U, R> Observable<R> flatMap(final Func1<? super T, ? extends Observable<? extends U>> collectionSelector, final Func2<? super T, ? super U, ? extends R> resultSelector, int maxConcurrent)"),e(s)])])])]),da,n("ul",null,[n("li",null,[n("a",va,[a("public final Observable<T> filter(Func1<? super T, Boolean> predicate)"),e(s)])])]),ba,n("p",null,[a("返回一个仅仅发射源 "),n("a",ma,[a("Observable"),e(s)]),a(" 发射的第一个［满足指定谓词的］元素的 "),n("a",ha,[a("Observable"),e(s)]),a("，如果如果源 "),n("a",ga,[a("Observable"),e(s)]),a(" 为空，则会抛出一个 "),fa,a("。")]),_a,n("ul",null,[n("li",null,[n("p",null,[n("a",xa,[a("public final Observable<T> first()"),e(s)])])]),n("li",null,[n("p",null,[n("a",Oa,[a("public final Observable<T> first(Func1<? super T, Boolean> predicate)"),e(s)])])])]),Ta,n("p",null,[a("返回一个仅仅发射源 "),n("a",ja,[a("Observable"),e(s)]),a(" 发射的倒数第一个［满足指定谓词的］元素的 "),n("a",wa,[a("Observable"),e(s)]),a("，如果如果源 "),n("a",ya,[a("Observable"),e(s)]),a(" 为空，则会抛出一个 "),Ra,a("。")]),Sa,n("ul",null,[n("li",null,[n("p",null,[n("a",Ja,[a("public final Observable<T> last()"),e(s)])])]),n("li",null,[n("p",null,[n("a",Fa,[a("public final Observable<T> last(Func1<? super T, Boolean> predicate)"),e(s)])])])]),Ua,n("ul",null,[n("li",null,[n("p",null,[n("a",Ia,[a("public final Observable<T> skip(int count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",La,[a("public final Observable<T> skip(long time, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",qa,[a("public final Observable<T> skip(long time, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),Ea,n("p",null,[a("跳过前面指定数量或指定时间内的元素，只发射后面的元素。指定时间时会延迟源 "),n("a",Ca,[a("Observable"),e(s)]),a(" 发射的任何数据。")]),Na,n("ul",null,[n("li",null,[n("p",null,[n("a",Ba,[a("public final Observable<T> skipLast(int count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Da,[a("public final Observable<T> skipLast(long time, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ma,[a("public final Observable<T> skipLast(long time, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),Wa,n("ul",null,[n("li",null,[n("p",null,[n("a",Aa,[a("public final Observable<T> take(final int count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Va,[a("public final Observable<T> take(long time, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",za,[a("public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),Ha,n("p",null,[a("只发射后面指定数量或指定时间内的元素。指定时间时会延迟源 "),n("a",Xa,[a("Observable"),e(s)]),a(" 发射的任何数据。")]),Ya,n("ul",null,[n("li",null,[n("p",null,[n("a",Ga,[a("public final Observable<T> takeLast(final int count)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ka,[a("public final Observable<T> takeLast(int count, long time, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Pa,[a("public final Observable<T> takeLast(int count, long time, TimeUnit unit, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Qa,[a("public final Observable<T> takeLast(long time, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",Za,[a("public final Observable<T> takeLast(long time, TimeUnit unit, Scheduler scheduler)"),e(s)])])])]),$a,n("p",null,[a("定期发射 "),n("a",ns,[a("Observable"),e(s)]),a(" 发射的最后一条数据。")]),as,n("ul",null,[n("li",null,[n("p",null,[n("a",ss,[a("public final Observable<T> sample(long period, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",es,[a("public final Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",ts,[a("public final <U> Observable<T> sample(Observable<U> sampler)"),e(s)])])])]),ps,n("ul",null,[n("li",null,[n("a",os,[a("public final Observable<T> elementAt(int index)"),e(s)])])]),ls,n("ul",null,[n("li",null,[n("a",cs,[a("public final Observable<T> elementAtOrDefault(int index, T defaultValue)"),e(s)])])]),is,n("ul",null,[n("li",null,[n("a",us,[a("public final Observable<T> ignoreElements()"),e(s)])])]),rs,n("ul",null,[n("li",null,[n("p",null,[n("a",ks,[a("public final Observable<T> distinct()"),e(s)])])]),n("li",null,[n("p",null,[n("a",ds,[a("public final <U> Observable<T> distinct(Func1<? super T, ? extends U> keySelector)"),e(s)])])])]),vs,n("p",null,[a("源 "),n("a",bs,[a("Observable"),e(s)]),a(" 每产生结果后，如果在规定的间隔时间内没有产生新的结果，则发射这个结果，否则会忽略这个结果。该操作符会过滤掉发射速率过快的数据项。")]),ms,n("ul",null,[n("li",null,[n("p",null,[n("a",hs,[a("public final Observable<T> debounce(long timeout, TimeUnit unit)"),e(s)])])]),n("li",null,[n("p",null,[n("a",gs,[a("public final Observable<T> debounce(long timeout, TimeUnit unit, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",fs,[a("public final <U> Observable<T> debounce(Func1<? super T, ? extends Observable<U>> debounceSelector)"),e(s)])])])]),_s])}const ws=p(i,[["render",xs],["__file","niyidinghuiyongdaode RxJava caozuofu.html.vue"]]);export{ws as default};
