import{_ as n,p as s,q as a,a0 as t}from"./framework-94b9cb5f.js";const e={},p=t(`<h2 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义" aria-hidden="true">#</a> 模式定义</h2><p>工厂模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，创建对象时不会对外暴露创建逻辑，并且通过一个共同的接口指向创建对象。</p><p>根据实现方式的不同，工厂模式可以分为简单工厂模式、工厂方法模式。</p><h2 id="简单工厂模式" tabindex="-1"><a class="header-anchor" href="#简单工厂模式" aria-hidden="true">#</a> 简单工厂模式</h2><p>简单工厂模式又称为静态工厂方法模式。大家经常使用的机械键盘有各种轴的，如红轴、青轴、茶轴等等。现在有一个厂商可以生产红轴和青轴键盘，使用代码该如何表现呢？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Keyboard <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> RedAxisKeyboard <span class="token operator">:</span> Keyboard <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Red axis keyboard inputting ...&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> GreenAxisKeyboard <span class="token operator">:</span> Keyboard <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Green axis keyboard inputting ...&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">object</span> Factory <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span>axis<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Keyboard<span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string-literal singleline"><span class="token string">&quot;red&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token function">RedAxisKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token string-literal singleline"><span class="token string">&quot;green&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token function">GreenAxisKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Factory<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;red&quot;</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    Factory<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;green&quot;</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在客户端调用 <code>Factory.make(type)</code> 传入 &quot;red&quot; or &quot;green&quot; 字符串就可以创建相应的对象。</p><p>这就是简单工厂模式，使用类图表示如下：</p><table><thead><tr><th style="text-align:center;"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZneTFnODA0cDF1Y25jajMwZHowNWVxMzEuanBn?x-oss-process=image/format,png" alt="image-20191016163751004"></th></tr></thead><tbody><tr><td style="text-align:center;">简单工厂模式类图</td></tr></tbody></table><p>相信不用我说大家也能看出来这种写法的弊端：</p><ul><li>传参容易出错（可以使用枚举或者在工厂类中为每个产品提供创建函数解决该问题）。</li><li>新增或者减少产品时需要修改工厂类（违反了开闭原则）。</li></ul><h2 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式" aria-hidden="true">#</a> 工厂方法模式</h2><p>为了解决增减产品带来的问题，可以将工厂抽象化，为每个产品建立单独的工厂，这就是工厂方法模式。</p><table><thead><tr><th style="text-align:center;"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZneTFnODA1eWN1b3ZtajMwa2IwNWtteGkuanBn?x-oss-process=image/format,png" alt="image-20191016172114663"></th></tr></thead><tbody><tr><td style="text-align:center;">工厂方法模式类图</td></tr></tbody></table><p>使用工厂方法模式改造键盘的生产：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> AbsKeyboardFactory <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Keyboard
<span class="token punctuation">}</span>

<span class="token keyword">object</span> RedAxisKeyboardFactory <span class="token operator">:</span> <span class="token function">AbsKeyboardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Keyboard <span class="token operator">=</span> <span class="token function">RedAxisKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">object</span> GreenAxisKeyboardFactory <span class="token operator">:</span> <span class="token function">AbsKeyboardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Keyboard <span class="token operator">=</span> <span class="token function">GreenAxisKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RedAxisKeyboardFactory<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    GreenAxisKeyboardFactory<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂改造完成后，新增产品只要新建工厂即可，比如新增茶轴键盘的制造：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> TeaAxisKeyboard <span class="token operator">:</span> Keyboard <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Tea axis keyboard inputting ...&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">object</span> TeaAxisKeyboardFactory <span class="token operator">:</span> <span class="token function">AbsKeyboardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Keyboard <span class="token operator">=</span> <span class="token function">TeaAxisKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TeaAxisKeyboardFactory<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用工厂方法模式，每个工厂负责一个产品的创建工作，在新增产品的时候就不需要再修改原有的代码，更易维护，降低了变更带来的风险。</p>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","gongchangmoshi（Factory Pattern）.html.vue"]]);export{r as default};
