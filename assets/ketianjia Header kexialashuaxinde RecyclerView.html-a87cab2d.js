import{_ as o,p as c,q as p,s as n,R as s,t as e,Y as t,n as i}from"./framework-a25df3d5.js";const l={},d={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,[s("下拉刷新的 "),n("code",null,"RecyclerView"),s("，兼有上拉加载更多、添加头部、定制脚部功能，下拉刷新使用 "),n("code",null,"SwipeRefreshLayout"),s("。")],-1),u={href:"https://github.com/shichaohui/RefreshRecyclerView",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"效果图",-1),v=n("p",null,[n("img",{src:"https://img-blog.csdn.net/20160128223854806",alt:"效果图"})],-1),m=n("h2",{id:"用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用法","aria-hidden":"true"},"#"),s(" 用法")],-1),b={href:"https://github.com/shichaohui/RefreshRecyclerView/blob/master/MainActivity.java",target:"_blank",rel:"noopener noreferrer"},h=t(`<h3 id="添加-header-和-footer" tabindex="-1"><a class="header-anchor" href="#添加-header-和-footer" aria-hidden="true">#</a> 添加 Header 和 Footer</h3><p><code>Footer</code> 有默认的，就是效果图上的那个，当然也可以使用以下方法定制 <code>Footer</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>refreshView<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加布局作为Header</span>
refreshView<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加View作为Header</span>

refreshView<span class="token punctuation">.</span><span class="token function">setFooter</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>footer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加布局作为Footer</span>
refreshView<span class="token punctuation">.</span><span class="token function">setFooter</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加view作为Footer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="刷新和加载更多" tabindex="-1"><a class="header-anchor" href="#刷新和加载更多" aria-hidden="true">#</a> 刷新和加载更多</h3><p>设置监听：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置刷新监听</span>
refreshView<span class="token punctuation">.</span><span class="token function">setOnRefreshListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SwipeRefreshLayout<span class="token punctuation">.</span>OnRefreshListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 可以在这里执行数据的刷新</span>
          
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置加载更多监听</span>
refreshView<span class="token punctuation">.</span><span class="token function">setOnLoadMoreListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshRecycleView<span class="token punctuation">.</span>OnLoadMoreListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 可以在这里执行加载更多数据</span>
         
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新完成后取消刷新动画：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>refreshView<span class="token punctuation">.</span><span class="token function">setRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开和关闭可加载更多状态：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>refreshView<span class="token punctuation">.</span><span class="token function">setLoadMoreEnable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不可再加载更多, 可以在没有更多数据时使用</span>
refreshView<span class="token punctuation">.</span><span class="token function">setLoadMoreEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开加载更多</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="适配器" tabindex="-1"><a class="header-anchor" href="#适配器" aria-hidden="true">#</a> 适配器</h3><p><code>RefreshRecyclerView.RefreshAdapter</code> 是对 <code>Header</code>、<code>Footer</code> 等功能的支持，所以定制自己的适配器时要继承 <code>RefreshRecyclerView.RefreshAdapter</code>，而不是继承 <code>RecyclerView.Adapter</code> 了。</p><p><code>RefreshRecyclerView.RefreshAdapter</code> 提供了两个抽象方法用来绑定视图和数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 创建ViewHolder, 用来代替onCreateViewHolder()方法, 用法还是一样的
 *
 * <span class="token keyword">@param</span> <span class="token parameter">parent</span>   父控件
 * <span class="token keyword">@param</span> <span class="token parameter">viewType</span> 类型
 * <span class="token keyword">@return</span> ViewHolder的子类实例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">VH</span> <span class="token function">onCreateHolder</span><span class="token punctuation">(</span><span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 给ViewHolder绑定数据, 用来代替onBindViewHolder(), 用法一样
 *
 * <span class="token keyword">@param</span> <span class="token parameter">holder</span>   ViewHolder的子类实例
 * <span class="token keyword">@param</span> <span class="token parameter">position</span> 位置
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onBindHolder</span><span class="token punctuation">(</span><span class="token class-name">VH</span> holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了支持 <code>Header</code> 和 <code>Footer</code>，<code>RefreshRecyclerView.RefreshAdapter</code> 已重写 <code>getItemViewType(int position)</code> 方法，因此，为了不影响显示不同类型的子视图，<code>RefreshRecyclerView.RefreshAdapter</code> 还提供了以下两个方法，有需要的话进行重写就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自定义获取子视图类型的方法
 *
 * <span class="token keyword">@param</span> <span class="token parameter">position</span> 位置
 * <span class="token keyword">@return</span> 类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemType</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写此方法，计算并返回自己的子视图类型</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 设置子视图类型, 如果有新的子视图类型, 直接往参数viewTypes中添加即可, 每个类型的值都要&gt;3, 且不能重复
 *
 * <span class="token keyword">@param</span> <span class="token parameter">viewTypes</span> 子视图类型列表
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setItemTypes</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> viewTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写此方法，向viewTypes中添加自己的子视图类型，类型值必须大于3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),w={href:"https://github.com/shichaohui/RefreshRecyclerView/blob/master/MainActivity.java",target:"_blank",rel:"noopener noreferrer"},f=t("<p>除了这些方法外就是 <code>RecyclerView</code> 的方法了，如 <code>setLayoutManager(LayoutManager layout)</code> 等。</p><p>如果以上方法不够用，比如要设置动画，我这里提供的类中并没有公开这个方法，要公开也很简单，参考 <code>setAdapter()</code> 方法的形式就可以了。</p><p>这里还有一个问题：就是 <code>onBindHolder(VH holder, int position)</code> 方法的 <code>position</code> 是减去了 <code>Header</code> 的数量的（不然无法跟数据集合中的 <code>position</code> 对应），所以在使用 <code>RecyclerView</code> 的需要以 <code>position</code> 为参数的方法时，需要把 <code>Header</code> 的数量加上（这里只能有 1 个 <code>Header</code>，所以 ＋1 就行了）。</p>",3);function y(g,_){const a=i("ExternalLinkIcon");return c(),p("div",null,[n("blockquote",null,[n("p",null,[n("small",null,[s("转载请注明出处，"),n("a",d,[s("点击此处"),e(a)]),s(" 查看更多精彩内容")])])]),r,n("p",null,[n("a",u,[s("代码在这"),e(a)])]),k,v,m,n("p",null,[s("不想看我啰嗦的直接看"),n("a",b,[s("MainActivity.java"),e(a)])]),h,n("p",null,[s("具体的使用方法可以参考"),n("a",w,[s("MainActivity.java"),e(a)])]),f])}const R=o(l,[["render",y],["__file","ketianjia Header kexialashuaxinde RecyclerView.html.vue"]]);export{R as default};
