import{_ as a,p as d,q as r,s as e,R as o,t,Y as s,n as l}from"./framework-a25df3d5.js";const c={},i=e("h2",{id:"什么是-node-js",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是-node-js","aria-hidden":"true"},"#"),o(" 什么是 Node.js ？")],-1),p={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"Chrome V8",-1),u=e("br",null,null,-1),_={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},f=e("h3",{id:"node-js-的组成部分",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#node-js-的组成部分","aria-hidden":"true"},"#"),o(" Node.js 的组成部分")],-1),m=e("li",null,[e("strong",null,"V8引擎"),e("br"),o(" V8 引擎就是 JavaScript 解释器，它负责解析和执行 JavaScript 代码。")],-1),b=e("li",null,[e("strong",null,"本地模块"),e("br"),o(" 本地是封装了通用功能的对性能要求较高的提前编译好的二进制文件，如 "),e("code",null,"libuv"),o("、"),e("code",null,"openssl"),o("。")],-1),g=e("strong",null,"标准库",-1),k=e("br",null,null,-1),j={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"安装-node-js",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-node-js","aria-hidden":"true"},"#"),o(" 安装 Node.js")],-1),x={href:"http://nodejs.cn/download",target:"_blank",rel:"noopener noreferrer"},y={href:"http://nodejs.cn/download/package-manager",target:"_blank",rel:"noopener noreferrer"},w=s(`<h2 id="从命令行运行-node-js-脚本" tabindex="-1"><a class="header-anchor" href="#从命令行运行-node-js-脚本" aria-hidden="true">#</a> 从命令行运行 Node.js 脚本</h2><p>当前目录创建 <code>hello.js</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> console.log<span class="token punctuation">(</span><span class="token string">&#39;Hello Node.js&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> hello.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行 <code>hello.js</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> hello.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从命令行接收参数" tabindex="-1"><a class="header-anchor" href="#从命令行接收参数" aria-hidden="true">#</a> 从命令行接收参数</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dea7aa065a9b4a6db48a8be45ea5f1f0~tplv-k3u1fbpfcp-watermark.image?" alt="从命令行接收参数"></p><ul><li>可以传入任意数量的参数。</li><li>参数可以是独立的（如 <code>p1</code>），也可以具有键值（如 <code>--p2=p2value</code>）。</li><li>在脚本中使用 <code>process.argv</code> 接收参数。</li><li>推荐使用 <code>minimist</code> 解析键值参数。</li><li>推荐使用 <code>inquirer.js</code> 制作命令行交互。</li></ul><h3 id="输出到命令行" tabindex="-1"><a class="header-anchor" href="#输出到命令行" aria-hidden="true">#</a> 输出到命令行</h3>`,9),T={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},S={href:"http://nodejs.cn/api/console.html",target:"_blank",rel:"noopener noreferrer"},N={href:"http://nodejs.cn/api/console.html",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,[e("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e47c630c344d52b24513c99c300211~tplv-k3u1fbpfcp-watermark.image?",alt:"console"})],-1),P=e("p",null,[e("strong",null,"日志美化：")],-1),R={href:"https://gist.github.com/iamnewton/8754917",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/chalk/chalk",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/visionmedia/node-progress",target:"_blank",rel:"noopener noreferrer"},q=e("h2",{id:"node-js-内置模块",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#node-js-内置模块","aria-hidden":"true"},"#"),o(" Node.js 内置模块")],-1),J={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},L=s(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdc587d5679043d8b36c636620a845cb~tplv-k3u1fbpfcp-watermark.image?" alt="Node.js 内置模块"></p><p>导入内置模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>module_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="路径模块-path" tabindex="-1"><a class="header-anchor" href="#路径模块-path" aria-hidden="true">#</a> 路径模块（path）</h3>`,4),O={href:"https://nodejs.cn/api/path.html",target:"_blank",rel:"noopener noreferrer"},I=s('<ul><li><code>path.basename()</code> 获取路径的最后一部分。</li><li><code>path.dirname()</code> 获取路径的目录。</li><li><code>path.extname()</code> 获取路径的扩展名。</li><li><code>path.isAbsolute()</code> 判断是否是绝对路径。</li><li><code>path.join()</code> 连接路径的两个或多个部分。</li><li><code>path.normalize()</code> 计算包含 <code>.</code> <code>..</code> <code>//</code> 等相对说明符时对应的真实路径。</li><li><code>path.parse()</code> 解析路径为一个 JavaScript 对象（root、dir、base、name、ext）。</li><li><code>path.relative()</code> 基于当前工作目录，返回从第一个路径到第二个路径的相对路径。</li><li><code>path.resolve()</code> 获得相对路径的绝对路径。</li></ul><h3 id="文件系统模块-fs" tabindex="-1"><a class="header-anchor" href="#文件系统模块-fs" aria-hidden="true">#</a> 文件系统模块（fs）</h3>',2),V={href:"https://nodejs.cn/api/fs.html",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"fs.access()",-1),F={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},M=s("<li><code>fs.appendFile()</code> 追加数据到文件。如果文件不存在，则创建文件。</li><li><code>fs.chmod()</code> 更改文件（通过传入的文件名指定）的权限。</li><li><code>fs.mkdir()</code> 新建文件夹。</li><li><code>fs.readdir()</code> 读取文件夹的内容。</li><li><code>fs.copyFile()</code> 拷贝文件。</li><li><code>fs.readFile()</code> 读取文件的内容。</li><li><code>fs.writeFile()</code> 将数据写入文件。</li><li><code>fs.rename()</code> 重命名文件或文件夹。</li><li><code>fs.rmdir()</code> 删除文件夹。</li><li><code>fs.realpath()</code> 将相对的文件路径 <code>.</code> <code>..</code> 解析为完整的路径。</li><li><code>fs.createReadStream()</code> 创建可读的文件流。</li><li><code>fs.createWriteStream()</code> 创建可写的文件流。</li><li><code>fs.watchFile()</code> 开始监视文件上的更改。</li>",13),z=e("p",null,[e("code",null,"fs"),o(" 模块所有的方法默认情况下都是异步的，想要同步工作需要调用对应的 sync 函数，如："),e("code",null,"fs.writeSync()"),o("。")],-1),U=e("h3",{id:"事件模块-events",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#事件模块-events","aria-hidden":"true"},"#"),o(" 事件模块（events）")],-1),W={href:"https://nodejs.cn/api/events.html",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"EventEmitter",-1),D={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},X=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> emitter<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>emitter.on()</code> 添加事件被触发时的回调函数。</li><li><code>emitter.once()</code> 添加事件被触发时的回调函数，该回调只会被调用一次。</li><li><code>emitter.off()</code> 移除指定的监听器。</li><li><code>emitter.emit()</code> 按照事件被注册的顺序同步地调用每个事件监听器。</li><li><code>emitter.eventNames()</code> 获取当前 <code>EventEmitter</code> 对象上注册的所有事件的名称数组。</li><li><code>emitter.listenerCount()</code> 获取指定事件监听器个数。</li><li><code>emitter.listeners()</code> 获取指定事件的所有监听器。</li><li><code>emitter.prependListener()</code> 将回调函数插入到队列的最前面。</li><li><code>emitter.prependOnceListener()</code> 将回调函数插入到队列的最前面，该回调只会被调用一次。</li><li><code>emitter.getMaxListeners()</code> 获取可以添加的监听器的最大数量。</li><li><code>emitter.setMaxListeners()</code> 设置可以添加的监听器的最大数量（默认为 10）。</li></ul><h3 id="http-模块" tabindex="-1"><a class="header-anchor" href="#http-模块" aria-hidden="true">#</a> http 模块</h3>`,3),G={href:"https://nodejs.cn/api/http.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},K=s('<ul><li><code>http.METHODS</code> 属性列出了所有支持的 HTTP 方法。</li><li><code>http.STATUS_CODES</code> 属性列出了所有的 HTTP 状态代码及其描述。</li><li><code>http.globalAgent</code> 属性是 <code>http.Agent</code> 类的全局实例，用于管理 HTTP 客户端连接的持久性和复用。</li><li><code>http.createServer()</code> 创建并返回 <code>http.Server</code> 类的新实例。</li><li><code>http.request()</code> 发送 HTTP 请求到服务器，并创建 <code>http.ClientRequest</code> 类的实例。</li><li><code>http.get()</code> 类似于 <code>http.request()</code>，但会自动设置 HTTP 方法为 <code>GET</code>，并自动调用 <code>req.end()</code>。</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bea376392cb649f9b53f5f31a6b27fe7~tplv-k3u1fbpfcp-watermark.image?" alt="http 模块"></p><h2 id="npm-包管理器" tabindex="-1"><a class="header-anchor" href="#npm-包管理器" aria-hidden="true">#</a> npm 包管理器</h2><h3 id="npm-简介" tabindex="-1"><a class="header-anchor" href="#npm-简介" aria-hidden="true">#</a> npm 简介</h3>',4),Q={href:"http://dev.nodejs.cn/learn/an-introduction-to-the-npm-package-manager",target:"_blank",rel:"noopener noreferrer"},Z={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},$=e("p",null,[e("strong",null,"常用命令：")],-1),ee=s("<li><code>npm init</code> 初始化项目。</li><li><code>npm install [&lt;@scope&gt;/]&lt;pkg&gt;</code> 安装软件包。</li><li><code>npm update [-g] [&lt;pkg&gt;...]</code> 更新软件包。</li><li><code>npm list [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</code> 查看已安装的软件包。</li><li><code>npm outdated</code> 查询当前项目中安装的已过时的软件包。</li>",5),oe=e("code",null,"npm view <pkg>[@<version>] [<field>[.subfield]...]",-1),ne={href:"http://dev.nodejs.cn/learn/an-introduction-to-the-npm-package-manager",target:"_blank",rel:"noopener noreferrer"},te=e("li",null,[e("code",null,"npm run <task-name>"),o(" 运行指定任务。")],-1),se=e("h3",{id:"package-json-和-package-lock-json",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-json-和-package-lock-json","aria-hidden":"true"},"#"),o(" package.json 和 package-lock.json")],-1),ae=e("code",null,"package.json",-1),de={href:"http://dev.nodejs.cn/learn/an-introduction-to-the-npm-package-manager",target:"_blank",rel:"noopener noreferrer"},re=e("code",null,"yarn",-1),le=e("code",null,"husky",-1),ce=e("code",null,"babel",-1),ie=e("br",null,null,-1),pe=e("code",null,"package-lock.json",-1),he=s('<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7503844f5f9b486eb287eed1209c9850~tplv-k3u1fbpfcp-watermark.image?" alt="package.json 和 package-lock.json"></p><h3 id="使用-npm-管理软件包" tabindex="-1"><a class="header-anchor" href="#使用-npm-管理软件包" aria-hidden="true">#</a> 使用 npm 管理软件包</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17344d888d0d4974ab92fd253450bb62~tplv-k3u1fbpfcp-watermark.image?" alt="使用 npm 管理软件包"></p><p>默认情况下，执行 <code>npm install</code> 命令时软件包会被安装到当前文件夹的 <code>node_modules</code> 子文件夹下，该软件包只对当前项目有效，使用 <code>-g</code> 标志可以执行全局安装，使用 <code>npm root -g</code> 可以查询全局安装目录。</p><h3 id="npm-的语义版本控制" tabindex="-1"><a class="header-anchor" href="#npm-的语义版本控制" aria-hidden="true">#</a> npm 的语义版本控制</h3><p>语义版本控制的概念很简单，所有的版本都是由 . 分割的 3 个数字组成：x.y.z，3 个数字分别表示主版本号、次版本号和补丁版本号。</p><p>当发布新的版本时，不仅仅是随心所欲地增加数字，还要遵循以下规则：</p><ul><li>当进行不兼容的 API 更改时，则升级主版本。</li><li>当以向后兼容的方式添加功能时，则升级次版本。</li><li>当进行向后兼容的缺陷修复时，则升级补丁版本。</li></ul><p>依赖包更新规则配置：</p><ul><li><code>^</code>：保持主版本号，若主版本号为 0，则保持次版本号。</li><li><code>~</code>：保持主版本号和次版本号。</li><li><code>&gt;</code>：接受高于指定版本的任何版本。</li><li><code>&gt;=</code>：接受等于或高于指定版本的任何版本。</li><li><code>&lt;=</code>：接受等于或低于指定版本的任何版本。</li><li><code>&lt;</code>：接受低于指定版本的任何版本。</li><li><code>=</code>：接受确切的版本。</li><li><code>-</code>：接受一定范围的版本。例如：2.1.0 - 2.6.2。</li><li><code>||</code>：组合集合。例如 &lt; 2.1 || &gt; 2.6。</li><li>无符号: 仅接受指定的特定版本（例如 1.2.1）。</li><li><code>latest</code>: 使用可用的最新版本。</li></ul><h2 id="使用-express-搭建-web-服务器" tabindex="-1"><a class="header-anchor" href="#使用-express-搭建-web-服务器" aria-hidden="true">#</a> 使用 Express 搭建 Web 服务器</h2><h3 id="express-简介" tabindex="-1"><a class="header-anchor" href="#express-简介" aria-hidden="true">#</a> Express 简介</h3>',12),ue={href:"https://github.com/expressjs/expressjs.com",target:"_blank",rel:"noopener noreferrer"},_e={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://expressjs.com/zh-cn/resources/frameworks.html",target:"_blank",rel:"noopener noreferrer"},me=e("ul",null,[e("li",null,"为不同 URL 路径中使用不同 HTTP 动词的请求（路由）编写处理程序。"),e("li",null,"集成了“视图”渲染引擎，以便通过将数据插入模板来生成响应。"),e("li",null,"设置常见 Web 应用设置，比如用于连接的端口，以及渲染响应模板的位置。"),e("li",null,"在请求处理管道的任何位置添加额外的请求处理“中间件”。")],-1),be={href:"https://github.com/expressjs/expressjs.com",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://expressjs.com/zh-cn/guide/using-middleware.html",target:"_blank",rel:"noopener noreferrer"},ke=s('<h3 id="express-路由" tabindex="-1"><a class="header-anchor" href="#express-路由" aria-hidden="true">#</a> Express 路由</h3><p>路由用于确定应用程序如何响应对特定端点的客户端请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。</p><p>路由定义采用以下结构：<code>app.method(path, ...handler)</code>。</p><ul><li><code>app</code> 是 <code>express</code> 的实例。</li><li><code>method</code>（路由方法）是由 HTTP 请求方法派生出的 <code>express</code> 实例函数，附加在 <code>Express</code> 类的实例上，<code>Express</code> 支持对应于 HTTP 方法的以下路由方法：<code>get</code>、<code>post</code>、<code>put</code>、<code>head</code>、<code>delete</code>、<code>options</code>、<code>trace</code>、<code>copy</code>、<code>patch</code> 等。</li><li><code>path</code>（路由路径）是服务器上的路径，路由路径与请求方法相结合，用于定义可以在其中提出请求的端点。路由路径可以是字符串、字符串模式或正则表达式。</li><li><code>handler</code>（路由处理程序）是在路由匹配时执行的处理函数，是一个函数、一组函数或者两者的结合，以类似于中间件的行为方式来处理请求。可以对路由施加先决条件，在没有理由继续执行当前路由的情况下，可将控制权传递给后续路由。通过调用响应对象的方法（如 <code>send</code>、<code>json</code>、<code>end</code>）可以向客户机发送响应，并终止请求/响应循环。如果没有从路由处理程序调用其中任何方法，客户端请求将保持挂起状态。</li></ul><h3 id="express-router" tabindex="-1"><a class="header-anchor" href="#express-router" aria-hidden="true">#</a> express.Router</h3><p>使用 <code>express.Router</code> 类来创建可安装的模块化路由处理程序，<code>Router</code> 实例是完整的中间件和路由系统。</p><p>在应用程序目录中创建名为 <code>birds.js</code> 的路由器文件，并使用 <code>express.Router</code> 创建一个路由模块，然后在应用程序中装入路由器改模块：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23303b65e0cf43d2b5264ddf20c70df2~tplv-k3u1fbpfcp-watermark.image?" alt="express.Router"></p><p>此应用程序现在可处理针对 <code>/birds/</code> 和 <code>/birds/mine</code> 的请求，并调用特定于此路由的中间件函数。</p><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> Axios</h3>',10),je={href:"https://www.axios-http.cn/",target:"_blank",rel:"noopener noreferrer"},ve=e("code",null,"Promise",-1),xe={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},ye={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},we={href:"https://nodejs.cn/api/http.html",target:"_blank",rel:"noopener noreferrer"},Te=e("code",null,"XMLHttpRequest",-1),Se=e("p",null,[e("strong",null,"Axios 特性：")],-1),Ne=e("li",null,[o("从浏览器创建 "),e("code",null,"XMLHttpRequests")],-1),Ee={href:"http://dev.nodejs.cn/learn",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://nodejs.cn/api/http.html",target:"_blank",rel:"noopener noreferrer"},Re=e("li",null,[o("支持 "),e("code",null,"Promise"),o(" API")],-1),He=e("li",null,"拦截请求和响应",-1),Ae=e("li",null,"转换请求和响应数据",-1),qe=e("li",null,"取消请求",-1),Je=e("li",null,"自动转换 JSON 数据",-1),Le=e("li",null,"客户端支持防御 XSRF",-1),Oe=s('<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e43af7d38d64be7b52f5e294312205f~tplv-k3u1fbpfcp-watermark.image?" alt="Axios"></p><h2 id="node-js-中使用-typescript" tabindex="-1"><a class="header-anchor" href="#node-js-中使用-typescript" aria-hidden="true">#</a> Node.js 中使用 TypeScript</h2><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h3>',3),Ie={href:"http://dev.nodejs.cn/learn/nodejs-with-typescript",target:"_blank",rel:"noopener noreferrer"},Ve=e("br",null,null,-1),Ce=e("br",null,null,-1),Fe=e("p",null,[e("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eb56c416f494636a601ee44143f4a2d~tplv-k3u1fbpfcp-watermark.image?",alt:"TypeScript"})],-1),Me=e("h3",{id:"tsconfig-json",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tsconfig-json","aria-hidden":"true"},"#"),o(" tsconfig.json")],-1),ze=e("code",null,"tsconfig.json",-1),Ue={href:"http://dev.nodejs.cn/learn/nodejs-with-typescript",target:"_blank",rel:"noopener noreferrer"},We=e("code",null,"tsconfig.json",-1),Be={href:"http://dev.nodejs.cn/learn/nodejs-with-typescript",target:"_blank",rel:"noopener noreferrer"},De=e("code",null,"tsc --init",-1),Xe=e("code",null,"tsconfig.json",-1),Ge=e("p",null,[e("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f49355011774a31ad6c8c443c84130f~tplv-k3u1fbpfcp-watermark.image?",alt:"tsconfig.json"})],-1),Ye=e("p",null,[e("strong",null,"tsconfig.json 配置：")],-1),Ke=e("code",null,"compilerOptions",-1),Qe={href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"},Ze=s("<li><code>compileOnSave</code> 配置 IDE 在保存文件的时候是否根据重新编译。</li><li><code>files</code> 指定一个包含相对或绝对文件路径的列表。</li><li><code>include</code> 和 <code>exclude</code> 属性指定一个文件 glob 匹配模式列表。支持的通配符如下： <ul><li><code>*</code> 匹配0或多个字符（不包括目录分隔符）</li><li><code>?</code> 匹配一个任意字符（不包括目录分隔符）</li><li><code>**/</code> 递归匹配任意子目录</li></ul></li><li><code>extends</code> 的值是一个字符串，包含指向另一个要继承文件的路径。</li>",4),$e=s(`<h3 id="node-js-中使用-typescript-1" tabindex="-1"><a class="header-anchor" href="#node-js-中使用-typescript-1" aria-hidden="true">#</a> Node.js 中使用 TypeScript</h3><p>安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译 <code>TypeScript</code> 文件为 JavaScript 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc xxx.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 <code>ts-node</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> ts-node @typs/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>ts-node</code> 直接运行 ts 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx ts-node xxx.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9);function eo(oo,no){const n=l("ExternalLinkIcon");return d(),r("div",null,[i,e("p",null,[e("a",p,[o("Node.js"),t(n)]),o(" 是一个基于 "),h,o(" 引擎的开源的跨平台的 JavaScript 运行时环境。"),u,e("a",_,[o("Node.js"),t(n)]),o(" 采用了基于事件的、单线程的异步 I/O 架构。")]),f,e("ul",null,[m,b,e("li",null,[g,k,o(" 标准库是 "),e("a",j,[o("Node.js"),t(n)]),o(" 提供给开发人员的兼容各平台的一套 JavaScript 接口。")])]),v,e("ul",null,[e("li",null,[o("手动下载安装，"),e("a",x,[o("查看下载"),t(n)])]),e("li",null,[o("使用包管理器，"),e("a",y,[o("查看包管理器"),t(n)])])]),w,e("p",null,[e("a",T,[o("Node.js"),t(n)]),o(" 提供了 "),e("a",S,[o("console"),t(n)]),o(" 模块，该模块提供了大量非常有用的与命令行交互的方法，它基本上与浏览器中的 "),e("a",N,[o("console"),t(n)]),o(" 对象相同。")]),E,P,e("ul",null,[e("li",null,[e("a",R,[o("转义序列"),t(n)]),o("：转义序列是一组标识颜色的字符，可以在控制台中为字符串着色。")]),e("li",null,[e("a",H,[o("chalk"),t(n)]),o("：修改字符样式，如下划线、斜体、颜色、背景色等。")]),e("li",null,[e("a",A,[o("progress"),t(n)]),o("：灵活的 ASCII 进度条。")])]),q,e("p",null,[e("a",J,[o("Node.js"),t(n)]),o(" 有一套内置模块，无需安装即可使用。")]),L,e("p",null,[e("a",O,[o("path"),t(n)]),o(" 模块提供了许多非常实用的函数来访问文件系统并与文件系统进行交互。")]),I,e("p",null,[e("a",V,[o("fs"),t(n)]),o(" 模块提供了许多非常实用的函数来访问文件系统并与文件系统进行交互。")]),e("ul",null,[e("li",null,[C,o(" 检查文件是否存在，以及 "),e("a",F,[o("Node.js"),t(n)]),o(" 是否有权限访问。")]),M]),z,U,e("p",null,[e("a",W,[o("events"),t(n)]),o(" 模块为提供了 "),B,o(" 类，这是在 "),e("a",D,[o("Node.js"),t(n)]),o(" 中处理事件的关键。")]),X,e("p",null,[e("a",G,[o("http"),t(n)]),o(" 模块是 "),e("a",Y,[o("Node.js"),t(n)]),o(" 网络的关键模块。")]),K,e("p",null,[e("a",Q,[o("npm"),t(n)]),o(" 是 "),e("a",Z,[o("Node.js"),t(n)]),o(" 标准的软件包管理器，具有下载/更新软件包、管理软件包的版本、运行指定任务等功能。")]),$,e("ul",null,[ee,e("li",null,[oe,o(" 查询软件包在 "),e("a",ne,[o("npm"),t(n)]),o(" 仓库中的最新可用版本。")]),te]),se,e("p",null,[ae,o(" 文件是用 JSON 格式组织的项目清单，它是 "),e("a",de,[o("npm"),t(n)]),o(" 和 "),re,o(" 存储已安装软件包的名称和版本的地方，也可以用于工具（如 "),le,o("、"),ce,o("）的配置。"),ie,pe,o(" 文件旨在跟踪被安装的每个软件包的确切版本，以便产品可以以相同的方式被 100％ 复制（即使软件包的维护者更新了软件包）。")]),he,e("p",null,[e("a",ue,[o("Express"),t(n)]),o(" 是最流行的 "),e("a",_e,[o("Node.js"),t(n)]),o(" 框架之一，是许多其它流行 "),e("a",fe,[o("Node 框架"),t(n)]),o(" 的底层库。它提供了以下机制：")]),me,e("p",null,[o("虽然 "),e("a",be,[o("Express"),t(n)]),o(" 本身是极简风格的，但是开发人员通过创建各类兼容的"),e("a",ge,[o("中间件"),t(n)]),o("解决了几乎所有的 Web 开发问题。这些库可以实现 cookie、会话、用户登录、URL 参数、POST 数据、安全头等功能。")]),ke,e("p",null,[e("a",je,[o("Axios"),t(n)]),o(" 是一个基于 "),ve,o(" 的可以用于浏览器和 "),e("a",xe,[o("Node.js"),t(n)]),o(" 的网络请求库。在服务端它使用 "),e("a",ye,[o("Node.js"),t(n)]),o(" 的 "),e("a",we,[o("http"),t(n)]),o(" 模块, 而在客户端 (浏览端) 则使用 "),Te,o("。")]),Se,e("ul",null,[Ne,e("li",null,[o("从 "),e("a",Ee,[o("Node.js"),t(n)]),o(" 创建 "),e("a",Pe,[o("http"),t(n)]),o(" 请求")]),Re,He,Ae,qe,Je,Le]),Oe,e("p",null,[e("a",Ie,[o("TypeScript"),t(n)]),o(" 是由 Microsoft 维护和开发的一个非常流行的开源语言。"),Ve,o(" 它是 JavaScript 的超集，为语言增加了新的功能，最值得注意的新功能是静态类型定义，这是普通 JavaScript 中所没有的。"),Ce,o(" 通过类型定义，我们可以声明期望的参数类型，以及在函数中确切返回的参数，或者所创建对象的确切是什么。 和编辑器代码检查配合，在编写代码时即可发现错误，它使我们的代码更安全，更健壮。")]),Fe,Me,e("p",null,[o("如果一个目录下存在一个 "),ze,o(" 文件，那么它意味着这个目录是 "),e("a",Ue,[o("TypeScript"),t(n)]),o(" 项目的根目录，"),We,o(" 文件指定了用来编译这个项目的根文件和编译选项。")]),e("p",null,[o("安装 "),e("a",Be,[o("TypeScript"),t(n)]),o(" 后可使用 "),De,o(" 命令生成 "),Xe,o(" 文件。")]),Ge,Ye,e("ul",null,[e("li",null,[Ke,o(" 指定编译配置，不指定时"),e("a",Qe,[o("编译器"),t(n)]),o("会使用默认值。")]),Ze]),$e])}const so=a(c,[["render",eo],["__file","Node.js rumen.html.vue"]]);export{so as default};
