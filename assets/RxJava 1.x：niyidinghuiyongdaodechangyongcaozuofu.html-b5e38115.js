import{_ as p,p as o,q as l,s as n,R as a,t as e,Y as t,n as c}from"./framework-a25df3d5.js";const i={},r={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},u=n("h1",{id:"rxjava-操作符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rxjava-操作符","aria-hidden":"true"},"#"),a(" RxJava 操作符")],-1),k=n("code",null,"RxJava1.x",-1),d={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"RxJava",-1),b={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"},m={href:"http://reactivex.io/RxJava/2.x/javadoc/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"参考文档：",-1),_={href:"http://reactivex.io/RxJava/javadoc",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.gitbook.com/book/mcxiaoke/rxdocs/details",target:"_blank",rel:"noopener noreferrer"},x=n("hr",null,null,-1),O={id:"_1-observable-的创建",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#_1-observable-的创建","aria-hidden":"true"},"#",-1),j={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},y=n("h3",{id:"_1-1-from",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-from","aria-hidden":"true"},"#"),a(" 1.1 from()")],-1),R={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)",target:"_blank",rel:"noopener noreferrer"},w={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[n("strong",null,"使用场景："),a(" 对集合（数组、List 等）进行遍历。")],-1),J=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/from.png",alt:"from()"})],-1),F=n("p",null,[n("strong",null,"其他 from() API：")],-1),I={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)",target:"_blank",rel:"noopener noreferrer"},U={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},L={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},q={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)",target:"_blank",rel:"noopener noreferrer"},E=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 遍历集合</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 使用 Future 创建 Observable，Future 表示一个异步计算的结果。</span>
<span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO 执行异步操作并返回数据</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hihi&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Scheduler<span class="token punctuation">.</span>Worker</span> worker <span class="token operator">=</span> <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        futureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-just" tabindex="-1"><a class="header-anchor" href="#_1-2-just" aria-hidden="true">#</a> 1.2 just()</h3>`,4),A={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)",target:"_blank",rel:"noopener noreferrer"},N={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"使用场景：",-1),B={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/just.png",alt:"just()"})],-1),M=n("p",null,[n("strong",null,"其他 just() API：")],-1),P={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T)",target:"_blank",rel:"noopener noreferrer"},W={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},V={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},z={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},H={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},X={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},G={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},K={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T,%20T)",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 just() 遍历几个元素</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
<span class="token comment">// 使用 from() 方法遍历，效果和 just() 一样。</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>stringArrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>just()</code> 方法可传入 1~10 个参数，也就说当元素个数小于等于 10 的时候既可以使用  <code>just() </code> 也可以使用 <code>from()</code>，否则只能用 <code>from()</code> 方法。</p><h3 id="_1-3-create" tabindex="-1"><a class="header-anchor" href="#_1-3-create" aria-hidden="true">#</a> 1.3 create()</h3>`,4),Z={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.Observable.OnSubscribe)",target:"_blank",rel:"noopener noreferrer"},$={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},nn=n("p",null,[n("strong",null,"使用场景："),a(" 不推荐使用，可使用其他操作符替代，如使用 "),n("code",null,"from()"),a("操作符完成遍历。")],-1),an=n("p",null,[n("strong",null,"其他 create() API：")],-1),sn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.observables.SyncOnSubscribe)",target:"_blank",rel:"noopener noreferrer"},en={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.observables.AsyncOnSubscribe)",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> onSubscribe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// onNext() 方法可执行多次</span>
        subscribe<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscribe<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法不常用，大多数时候都是使用 <code>just()</code>、<code>from()</code> 等方法，如上面那串代码就可以写成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-interval" tabindex="-1"><a class="header-anchor" href="#_1-4-interval" aria-hidden="true">#</a> 1.4 interval()</h3>`,5),pn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},on={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,[n("strong",null,"使用场景："),a(" 可使用该操作符完成定时、倒计时等功能。")],-1),cn=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/interval.png",alt:"interval()"})],-1),rn=n("p",null,[n("strong",null,"其他 interval() API：")],-1),un={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},vn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每隔 1 s 发送一个序列号，序列号从 0 开始，每次累加 1。</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-timer" tabindex="-1"><a class="header-anchor" href="#_1-5-timer" aria-hidden="true">#</a> 1.5 timer()</h3>`,3),bn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},hn=n("p",null,[n("strong",null,"使用场景："),a(" 可用来完成定时功能。")],-1),gn=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/timer.png",alt:"timer()"})],-1),_n=n("p",null,[n("strong",null,"其他 timer() API：")],-1),fn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},xn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定时 3 s</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-range" tabindex="-1"><a class="header-anchor" href="#_1-6-range" aria-hidden="true">#</a> 1.6 range()</h3>`,3),On={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)",target:"_blank",rel:"noopener noreferrer"},Tn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},jn=n("p",null,[n("strong",null,"使用场景："),a(" 可使用该操作符完成一个 "),n("code",null,"fori"),a(" 的循环，如 "),n("code",null,"for(int i=5;i<=7;i++)"),a(" --> "),n("code",null,"Observable.range(5, 3)"),a("。")],-1),yn=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/range.png",alt:"range()"})],-1),Rn=n("p",null,[n("strong",null,"其他 range() API：")],-1),wn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Sn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 依次发射 5、6、7</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-empty" tabindex="-1"><a class="header-anchor" href="#_1-7-empty" aria-hidden="true">#</a> 1.7 empty()</h3>`,3),Jn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"onCompleted()",-1),In={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Un=t(`<p><img src="https://reactivex.io/documentation/operators/images/empty.png" alt="empty()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发出一个 onCompleted() 通知</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-error" tabindex="-1"><a class="header-anchor" href="#_1-8-error" aria-hidden="true">#</a> 1.8 error()</h3>`,4),Ln={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"onError",-1),En={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},An=t(`<p><strong>使用场景：</strong> 程序中捕获异常后，可使用该操作符把捕获的异常传递到后面的逻辑中处理。</p><p><img src="https://reactivex.io/documentation/operators/images/error.png" alt="error()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发出一个 onError() 通知</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-never" tabindex="-1"><a class="header-anchor" href="#_1-9-never" aria-hidden="true">#</a> 1.9 never()</h3>`,5),Nn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()",target:"_blank",rel:"noopener noreferrer"},Cn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<p><img src="https://reactivex.io/documentation/operators/images/never.png" alt="never()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-10-defer" tabindex="-1"><a class="header-anchor" href="#_1-10-defer" aria-hidden="true">#</a> 1.10 defer()</h3>`,4),Dn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defer(rx.functions.Func0)",target:"_blank",rel:"noopener noreferrer"},Mn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<p><strong>使用场景：</strong> 可以使用该操作符封装需要被多次执行的函数。</p><p><img src="https://reactivex.io/documentation/operators/images/defer.png" alt="defer()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-重做" tabindex="-1"><a class="header-anchor" href="#_2-重做" aria-hidden="true">#</a> 2 重做</h2><h3 id="_2-1-repeat" tabindex="-1"><a class="header-anchor" href="#_2-1-repeat" aria-hidden="true">#</a> 2.1 repeat()</h3>`,6),Wn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()",target:"_blank",rel:"noopener noreferrer"},Vn=t('<p>使Observable 对象在发出 <code>onNext()</code> 通知之后重复发射数据。重做结束才会发出 <code>onComplete()</code> 通知，若重做过程中出现异常则会中断并发出 <code>onError()</code> 通知。</p><p><strong>使用场景：</strong> 可使用该操作符指定一次任务执行完成后立即重复执行上一次的任务，如发送多次网络请求等。</p><p><img src="https://reactivex.io/documentation/operators/images/repeat.png" alt="repeat()"></p><p><strong>其他 repeat() API：</strong></p>',4),zn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)",target:"_blank",rel:"noopener noreferrer"},Hn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Xn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Yn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无限重复执行</span>
observable<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重复执行 5 次</span>
observable<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-repeatwhen" tabindex="-1"><a class="header-anchor" href="#_2-2-repeatwhen" aria-hidden="true">#</a> 2.2 repeatWhen()</h3>`,3),Gn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Kn=t('<p>使Observable 对象在发出 <code>onNext()</code> 通知之后有条件的重复发射数据。重做结束才会发出 <code>onCompleted()</code> 通知，若重做过程中出现异常则会中断并发出 <code>onError()</code> 通知。</p><p><strong>使用场景：</strong> 可使用该操作符指定满足一定条件时重复执行一个任务，如发送多次网络请求等。</p><p><img src="https://reactivex.io/documentation/operators/images/repeat.png" alt="repeatWhen()"></p><p><strong>其他 repeatWhen() API：</strong></p>',4),Qn={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Zn=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>observable<span class="token punctuation">.</span><span class="token function">repeatWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重复 3 次, 每次间隔 1 s</span>
        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Void</span> aVoid<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-重试" tabindex="-1"><a class="header-anchor" href="#_3-重试" aria-hidden="true">#</a> 3 重试</h2><h3 id="_3-1-retry" tabindex="-1"><a class="header-anchor" href="#_3-1-retry" aria-hidden="true">#</a> 3.1 retry()</h3>`,4),$n={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()",target:"_blank",rel:"noopener noreferrer"},na={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},aa=n("code",null,"onError()",-1),sa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ea=n("code",null,"onNext()",-1),ta=n("code",null,"onCompleted()",-1),pa=n("code",null,"onError()",-1),oa=n("p",null,[n("strong",null,"使用场景："),a(" 网络等请求异常出错后，可重新发起请求。")],-1),la=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/retry.png",alt:"retry()"})],-1),ca=n("p",null,[n("strong",null,"其他 retry() API：")],-1),ia={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)",target:"_blank",rel:"noopener noreferrer"},ra={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)",target:"_blank",rel:"noopener noreferrer"},ua=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;.......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无限次的重试</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重试 3 次</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用谓语函数决定是否重试</span>
observable<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 参数 integer 是订阅的次数; 参数 throwable 是抛出的异常</span>
        <span class="token comment">// 返回值为 true 表示重试, 返回值为 false 表示不重试</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-retrywhen" tabindex="-1"><a class="header-anchor" href="#_3-2-retrywhen" aria-hidden="true">#</a> 3.2 retryWhen()</h3>`,3),ka={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},da=n("p",null,"有条件的执行重试。",-1),va=n("p",null,[n("strong",null,"使用场景："),a(" 网络等请求异常出错后，若满足一定条件，则重新发起请求。")],-1),ba=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/retry.png",alt:"retryWhen()"})],-1),ma=n("p",null,[n("strong",null,"其他 retryWhen() API：")],-1),ha={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},ga=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 重试 3 次，每次间隔 1 s</span>
observable<span class="token punctuation">.</span><span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-变换" tabindex="-1"><a class="header-anchor" href="#_4-变换" aria-hidden="true">#</a> 4 变换</h2><h3 id="_4-1-map" tabindex="-1"><a class="header-anchor" href="#_4-1-map" aria-hidden="true">#</a> 4.1 map()</h3>`,4),_a={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},fa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},xa=n("strong",null,"使用场景：",-1),Oa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ta=t(`<p><img src="https://reactivex.io/documentation/operators/images/map.png" alt="map()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据的两倍为: %s&quot;</span><span class="token punctuation">,</span> integer <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-flatmap" tabindex="-1"><a class="header-anchor" href="#_4-2-flatmap" aria-hidden="true">#</a> 4.2 flatMap()</h3>`,4),ja={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},ya={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ra={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},wa=n("p",null,[n("strong",null,"使用场景："),a(" 从网络获取数据并使用 obsA 对象发射，flatMap() 操作符中可将数据存进数据库并返回一个新的对象 obsB。")],-1),Sa=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/flatMap.png",alt:"flatMap()"})],-1),Ja=n("p",null,[n("strong",null,"其他 flatMap() API：")],-1),Fa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)",target:"_blank",rel:"noopener noreferrer"},Ia={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)",target:"_blank",rel:"noopener noreferrer"},Ua={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)",target:"_blank",rel:"noopener noreferrer"},La={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)",target:"_blank",rel:"noopener noreferrer"},qa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)",target:"_blank",rel:"noopener noreferrer"},Ea=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 转换为一个定时 integer 秒的 Observable 对象</span>
                <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-过滤" tabindex="-1"><a class="header-anchor" href="#_5-过滤" aria-hidden="true">#</a> 5 过滤</h2><h3 id="_5-1-filter" tabindex="-1"><a class="header-anchor" href="#_5-1-filter" aria-hidden="true">#</a> 5.1 filter()</h3>`,4),Aa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Na=t(`<p>只发射满足指定谓词的元素。</p><p><strong>使用场景：</strong> 可使用 filter 代替 if 语句。</p><p><img src="https://reactivex.io/documentation/operators/images/filter.png" alt="filter()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-first" tabindex="-1"><a class="header-anchor" href="#_5-2-first" aria-hidden="true">#</a> 5.2 first()</h3>`,6),Ca={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()",target:"_blank",rel:"noopener noreferrer"},Ba={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Da={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ma={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Pa=n("code",null,"NoSuchElementException",-1),Wa=n("p",null,[n("strong",null,"使用场景："),a(" 顺序发出多条数据，只接收第一条。")],-1),Va=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/first.png",alt:"first()"})],-1),za=n("p",null,[n("strong",null,"其他 first() API：")],-1),Ha={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Xa=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发射第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发射满足条件的第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 会抛出 NoSuchElementException 异常</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-last" tabindex="-1"><a class="header-anchor" href="#_5-3-last" aria-hidden="true">#</a> 5.3 last()</h3>`,3),Ya={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()",target:"_blank",rel:"noopener noreferrer"},Ga={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Ka={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Qa={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},Za=n("code",null,"NoSuchElementException",-1),$a=n("p",null,[n("strong",null,"使用场景："),a(" 顺序发出多条数据，只接收最后一条。")],-1),ns=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/last.png",alt:"last()"})],-1),as=n("p",null,[n("strong",null,"其他 last() API：")],-1),ss={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},es=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发射倒数第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发射满足条件的倒数第一个元素</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> integer <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 会抛出 NoSuchElementException 异常</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-skip" tabindex="-1"><a class="header-anchor" href="#_5-4-skip" aria-hidden="true">#</a> 5.4 skip()</h3>`,3),ts={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)",target:"_blank",rel:"noopener noreferrer"},ps=n("p",null,"跳过前面指定数量或指定时间内的元素，只发射后面的元素。",-1),os=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/skip.png",alt:"skip()"})],-1),ls=n("p",null,[n("strong",null,"其他 skip() API：")],-1),cs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},is={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},rs=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 跳过前两条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-skiplast" tabindex="-1"><a class="header-anchor" href="#_5-5-skiplast" aria-hidden="true">#</a> 5.5 skipLast()</h3>`,3),us={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)",target:"_blank",rel:"noopener noreferrer"},ks={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ds=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/skipLast.png",alt:"skipLast()"})],-1),vs=n("p",null,[n("strong",null,"其他 skipLast() API：")],-1),bs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},ms={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},hs=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">skipLast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 跳过后两条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-take" tabindex="-1"><a class="header-anchor" href="#_5-6-take" aria-hidden="true">#</a> 5.6 take()</h3>`,3),gs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)",target:"_blank",rel:"noopener noreferrer"},_s=n("p",null,"只发射前面指定数量或指定时间内的元素。",-1),fs=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/take.png",alt:"take()"})],-1),xs=n("p",null,[n("strong",null,"其他 take() API：")],-1),Os={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Ts={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},js=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只发射前三条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-7-takelast" tabindex="-1"><a class="header-anchor" href="#_5-7-takelast" aria-hidden="true">#</a> 5.7 takeLast()</h3>`,3),ys={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)",target:"_blank",rel:"noopener noreferrer"},Rs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ws=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/take.png",alt:"takeLast()"})],-1),Ss=n("p",null,[n("strong",null,"其他 takeLast() API：")],-1),Js={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Fs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Is={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Us={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Ls=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeLast</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只发射后三条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-8-sample" tabindex="-1"><a class="header-anchor" href="#_5-8-sample" aria-hidden="true">#</a> 5.8 sample()</h3>`,3),qs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},Es={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},As=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/sample.png",alt:"sample()"})],-1),Ns=n("p",null,[n("strong",null,"其他 sample() API：")],-1),Cs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},Bs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)",target:"_blank",rel:"noopener noreferrer"},Ds=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-9-elementat" tabindex="-1"><a class="header-anchor" href="#_5-9-elementat" aria-hidden="true">#</a> 5.9 elementAt()</h3>`,3),Ms={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)",target:"_blank",rel:"noopener noreferrer"},Ps=t(`<p>只发射指定索引的元素。 <strong>使用场景：</strong> 按索引去集合中的元素等。</p><p><img src="https://reactivex.io/documentation/operators/images/elementAt.png" alt="elementAt()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发射索引为 2 的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-10-elementatordefault" tabindex="-1"><a class="header-anchor" href="#_5-10-elementatordefault" aria-hidden="true">#</a> 5.10 elementAtOrDefault()</h3>`,5),Ws={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)",target:"_blank",rel:"noopener noreferrer"},Vs=t(`<p>只发射指定索引的元素，若该索引对应的元素不存在，则发射默认值。</p><p><img src="https://reactivex.io/documentation/operators/images/elementAtOrDefault.png" alt="elementAtOrDefault()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elementAtOrDefault</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发射索引为 9的数据，若不存在，则发射 -5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-11-ignoreelements" tabindex="-1"><a class="header-anchor" href="#_5-11-ignoreelements" aria-hidden="true">#</a> 5.11 ignoreElements()</h3>`,5),zs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()",target:"_blank",rel:"noopener noreferrer"},Hs=t(`<p>不发射任何数据，直接发出 <code>onCompleted()</code> 通知。</p><p><img src="https://reactivex.io/documentation/operators/images/ignoreElements.png" alt="ignoreElements()"></p><p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-12-distinct" tabindex="-1"><a class="header-anchor" href="#_5-12-distinct" aria-hidden="true">#</a> 5.12 distinct()</h3>`,5),Xs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct()",target:"_blank",rel:"noopener noreferrer"},Ys=n("p",null,"过滤重复的元素，过滤规则是：只允许还没有发射过的元素通过。",-1),Gs=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/distinct.png",alt:"distinct()"})],-1),Ks=n("p",null,[n("strong",null,"其他 distinct() API：")],-1),Qs={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},Zs=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接过滤</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过生成的 key 值过滤</span>
<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 随机生成 key</span>
        <span class="token keyword">return</span> integer <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-13-debounce" tabindex="-1"><a class="header-anchor" href="#_5-13-debounce" aria-hidden="true">#</a> 5.13 debounce()</h3>`,3),$s={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)",target:"_blank",rel:"noopener noreferrer"},ne={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html",target:"_blank",rel:"noopener noreferrer"},ae=n("p",null,[n("img",{src:"https://reactivex.io/documentation/operators/images/debounce.png",alt:"debounce()"})],-1),se=n("p",null,[n("strong",null,"其他 debounce() API：")],-1),ee={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)",target:"_blank",rel:"noopener noreferrer"},te={href:"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(rx.functions.Func1)",target:"_blank",rel:"noopener noreferrer"},pe=t(`<p><strong>举例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> observable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//产生结果的间隔时间分别为100、200、300...900毫秒</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subscriber<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observable<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>  <span class="token comment">// 超时时间为400毫秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该例子产生结果为：依次打印5、6、7、8。</p><h2 id="附-功能实现" tabindex="-1"><a class="header-anchor" href="#附-功能实现" aria-hidden="true">#</a> 附：功能实现</h2><h3 id="延时遍历" tabindex="-1"><a class="header-anchor" href="#延时遍历" aria-hidden="true">#</a> 延时遍历</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 遍历</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> traverseObservable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计时</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> intervalObservable <span class="token operator">=</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> func2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Long</span> aLong<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> integer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

intervalObservable<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span>traverseObservable<span class="token punctuation">,</span> func2<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;onCompleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="倒计时" tabindex="-1"><a class="header-anchor" href="#倒计时" aria-hidden="true">#</a> 倒计时</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> startTime <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>startTime <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 接收 startTime + 1 次</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1 2 3...转换为...3 2 1</span>
                <span class="token keyword">return</span> startTime <span class="token operator">-</span> time<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时出现异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">Long</span> aLong<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时: %s s&quot;</span><span class="token punctuation">,</span> aLong<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function oe(le,ce){const s=c("ExternalLinkIcon");return o(),l("div",null,[n("blockquote",null,[n("p",null,[n("small",null,[a("转载请注明出处，"),n("a",r,[a("点击此处"),e(s)]),a(" 查看更多精彩内容。")])])]),u,n("blockquote",null,[n("p",null,[a("本文基于 "),k,a(" 版本，阅读本文前请先了解 "),n("a",d,[a("RxJava"),e(s)]),a("  的基本使用。")])]),n("p",null,[v,a(" 版本已升级到 "),n("a",b,[a("RxJava2.x"),e(s)]),a(" ，各个 "),n("a",m,[a("API"),e(s)]),a(" 均有不同程度的变化，具体请查看"),n("a",h,[a("官方文档"),e(s)]),a("。")]),g,n("ul",null,[n("li",null,[n("a",_,[a("RxJava JavaDoc"),e(s)])]),n("li",null,[n("a",f,[a("ReactiveX 文档中文翻译"),e(s)])])]),x,n("h2",O,[T,a(" 1 "),n("a",j,[a("Observable"),e(s)]),a(" 的创建")]),y,n("p",null,[n("a",R,[a("public static <T> Observable<T> from(Iterable<? extends T> iterable);"),e(s)])]),n("p",null,[a("转换集合为一个每次发射集合中一个元素的 "),n("a",w,[a("Observable"),e(s)]),a(" 对象。")]),S,J,F,n("ul",null,[n("li",null,[n("p",null,[n("a",I,[a("public static <T> Observable<T> from(Future<? extends T> future);"),e(s)])])]),n("li",null,[n("p",null,[n("a",U,[a("public static <T> Observable<T> from(Future<? extends T> future, long timeout, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",L,[a("public static <T> Observable<T> from(Future<? extends T> future, Scheduler scheduler);"),e(s)])])]),n("li",null,[n("p",null,[n("a",q,[a("public static <T> Observable<T> from(T[] array);"),e(s)])])])]),E,n("p",null,[n("a",A,[a("public static <T> Observable<T> just(final T value);"),e(s)])]),n("p",null,[a("转换一个或多个 Object 为依次发射这些 Object 的 "),n("a",N,[a("Observable"),e(s)]),a(" 对象。")]),n("p",null,[C,a(" 转换一个或多个普通 Object 为 "),n("a",B,[a("Observable"),e(s)]),a(" 对象，如转换数据库查询结果、网络查询结果等。")]),D,M,n("ul",null,[n("li",null,[n("p",null,[n("a",P,[a("public static <T> Observable<T> just(T t1, T t2);"),e(s)])])]),n("li",null,[n("p",null,[n("a",W,[a("public static <T> Observable<T> just(T t1, T t2, T t3);"),e(s)])])]),n("li",null,[n("p",null,[n("a",V,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4);"),e(s)])])]),n("li",null,[n("p",null,[n("a",z,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5);"),e(s)])])]),n("li",null,[n("p",null,[n("a",H,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6);"),e(s)])])]),n("li",null,[n("p",null,[n("a",X,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Y,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8);"),e(s)])])]),n("li",null,[n("p",null,[n("a",G,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9);"),e(s)])])]),n("li",null,[n("p",null,[n("a",K,[a("public static <T> Observable<T> just(T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10);"),e(s)])])])]),Q,n("p",null,[n("a",Z,[a("public static <T> Observabl<T> create(OnSubscribe<T> f);"),e(s)])]),n("p",null,[a("返回一个在被 OnSubscribe 订阅时执行特定方法的 "),n("a",$,[a("Observable"),e(s)]),a(" 对象。")]),nn,an,n("ul",null,[n("li",null,[n("p",null,[n("a",sn,[a("@Beta public static <S, T> Observable<T> create(SyncOnSubscribe<S, T> syncOnSubscribe);"),e(s)])])]),n("li",null,[n("p",null,[n("a",en,[a("@Experimental public static <S, T> Observable<T> create(AsyncOnSubscribe<S, T> asyncOnSubscribe);"),e(s)])])])]),tn,n("p",null,[n("a",pn,[a("public static Observable<Long> interval(long interval, TimeUnit unit);"),e(s)])]),n("p",null,[a("返回一个每隔指定的时间间隔就发射一个序列号的 "),n("a",on,[a("Observable"),e(s)]),a(" 对象。")]),ln,cn,rn,n("ul",null,[n("li",null,[n("p",null,[n("a",un,[a("public static Observable<Long> interval(long interval, TimeUnit unit, Scheduler scheduler);"),e(s)])])]),n("li",null,[n("p",null,[n("a",kn,[a("public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",dn,[a("public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit, Scheduler scheduler);"),e(s)])])])]),vn,n("p",null,[n("a",bn,[a("public static Observable<Long> timer(long delay, TimeUnit unit);"),e(s)])]),n("p",null,[a("创建一个在指定延迟时间后发射一条数据（固定值：0）的 "),n("a",mn,[a("Observable"),e(s)]),a(" 对象。")]),hn,gn,_n,n("ul",null,[n("li",null,[n("a",fn,[a("public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler);"),e(s)])])]),xn,n("p",null,[n("a",On,[a("public static Observable<Integer> range(int start, int count);"),e(s)])]),n("p",null,[a("创建一个发射指定范围内的连续整数的 "),n("a",Tn,[a("Observable"),e(s)]),a(" 对象。")]),jn,yn,Rn,n("ul",null,[n("li",null,[n("a",wn,[a("public static Observable<Integer> range(int start, int count, Scheduler scheduler);"),e(s)])])]),Sn,n("p",null,[n("a",Jn,[a("public static <T> Observable<T> empty();"),e(s)])]),n("p",null,[a("创建一个不发射任何数据就发出 "),Fn,a(" 通知的 "),n("a",In,[a("Observable"),e(s)]),a(" 对象。")]),Un,n("p",null,[n("a",Ln,[a("public static <T> Observable<T> error(Throwable exception);"),e(s)])]),n("p",null,[a("创建不发射任何数据就发出 "),qn,a(" 通知的 "),n("a",En,[a("Observable"),e(s)]),a(" 对象。")]),An,n("p",null,[n("a",Nn,[a("public static <T> Observable<T> never();"),e(s)])]),n("p",null,[a("创建一个不发射任何数据和通知的 "),n("a",Cn,[a("Observable"),e(s)]),a(" 对象。")]),Bn,n("p",null,[n("a",Dn,[a("public static <T> Observable<T> defer(Func0<Observable<T>> observableFactory);"),e(s)])]),n("p",null,[a("在订阅的时候才会创建 Observable 对象；每一次订阅都创建一个新的 "),n("a",Mn,[a("Observable"),e(s)]),a(" 对象。")]),Pn,n("p",null,[n("a",Wn,[a("public final Observable<T> repeat();"),e(s)])]),Vn,n("ul",null,[n("li",null,[n("p",null,[n("a",zn,[a("public final Observable<T> repeat(final long count); "),e(s)])])]),n("li",null,[n("p",null,[n("a",Hn,[a("public final Observable<T> repeat(Scheduler scheduler); "),e(s)])])]),n("li",null,[n("p",null,[n("a",Xn,[a("public final Observable<T> repeat(final long count, Scheduler scheduler);"),e(s)])])])]),Yn,n("p",null,[n("a",Gn,[a("public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable<?>> notificationHandler)"),e(s)])]),Kn,n("ul",null,[n("li",null,[n("a",Qn,[a("public final Observable<T> repeatWhen(final Func1<? super Observable<? extends Void>, ? extends Observable>?> notificationHandler, Scheduler scheduler);"),e(s)])])]),Zn,n("p",null,[n("a",$n,[a("public final Observable<T> retry();"),e(s)])]),n("p",null,[a("在执行 "),n("a",na,[a("Observable"),e(s)]),a("对象的序列出现异常时，不直接发出 "),aa,a(" 通知，而是重新订阅该 "),n("a",sa,[a("Observable"),e(s)]),a("对象，直到重做过程中未出现异常，则会发出 "),ea,a(" 和 "),ta,a(" 通知；若重做过程中也出现异常，则会继续重试，直到达到重试次数上限，超出次数后发出最新的 "),pa,a(" 通知。")]),oa,la,ca,n("ul",null,[n("li",null,[n("p",null,[n("a",ia,[a("public final Observable<T> retry(final long count);"),e(s)])])]),n("li",null,[n("p",null,[n("a",ra,[a("public final Observable<T> retry(Func2<Integer, Throwable, Boolean> predicate);"),e(s)])])])]),ua,n("p",null,[n("a",ka,[a("public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>> notificationHandler);"),e(s)])]),da,va,ba,ma,n("ul",null,[n("li",null,[n("a",ha,[a("public final Observable<T> retryWhen(final Func1<? super Observable<? extends Throwable>, ? extends Observable<?>>notificationHandler, Scheduler scheduler);"),e(s)])])]),ga,n("p",null,[n("a",_a,[a("public final <R> Observable<R> map(Func1<? super T, ? extends R> func);"),e(s)])]),n("p",null,[a("把源 "),n("a",fa,[a("Observable"),e(s)]),a(" 发射的元素应用于指定的函数，并发送该函数的结果。")]),n("p",null,[xa,a(" 将从网络获取的数据（NetData 对象）转换为数据库相关对象（DBData对象）并使用 "),n("a",Oa,[a("Observable"),e(s)]),a(" 发送。")]),Ta,n("p",null,[n("a",ja,[a("public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func);"),e(s)])]),n("p",null,[a("转换源 "),n("a",ya,[a("Observable"),e(s)]),a(" 对象为另一个 "),n("a",Ra,[a("Observable"),e(s)]),a(" 对象。")]),wa,Sa,Ja,n("ul",null,[n("li",null,[n("p",null,[n("a",Fa,[a("@Beta public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func, int maxConcurrent);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ia,[a("public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ua,[a("@Beta public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted, int maxConcurrent);"),e(s)])])]),n("li",null,[n("p",null,[n("a",La,[a("public final <U, R> Observable<R> flatMap(final Func1<? super T, ? extends Observable<? extends U>> collectionSelector, final Func2<? super T, ? super U, ? extends R> resultSelector);"),e(s)])])]),n("li",null,[n("p",null,[n("a",qa,[a("@Beta public final <U, R> Observable<R> flatMap(final Func1<? super T, ? extends Observable<? extends U>> collectionSelector, final Func2<? super T, ? super U, ? extends R> resultSelector, int maxConcurrent);"),e(s)])])])]),Ea,n("p",null,[n("a",Aa,[a("public final Observable<T> filter(Func1<? super T, Boolean> predicate);"),e(s)])]),Na,n("p",null,[n("a",Ca,[a("public final Observable<T> first();"),e(s)])]),n("p",null,[a("返回一个仅仅发射源 "),n("a",Ba,[a("Observable"),e(s)]),a(" 发射的第一个［满足指定谓词的］元素的 "),n("a",Da,[a("Observable"),e(s)]),a("，如果源 "),n("a",Ma,[a("Observable"),e(s)]),a(" 为空，则会抛出一个 "),Pa,a("。")]),Wa,Va,za,n("ul",null,[n("li",null,[n("a",Ha,[a("public final Observable<T> first(Func1<? super T, Boolean> predicate)"),e(s)])])]),Xa,n("p",null,[n("a",Ya,[a("public final Observable<T> last();"),e(s)])]),n("p",null,[a("返回一个仅仅发射源 "),n("a",Ga,[a("Observable"),e(s)]),a(" 发射的倒数第一个［满足指定谓词的］元素的 "),n("a",Ka,[a("Observable"),e(s)]),a("，如果源 "),n("a",Qa,[a("Observable"),e(s)]),a(" 为空，则会抛出一个 "),Za,a("。")]),$a,ns,as,n("ul",null,[n("li",null,[n("a",ss,[a("public final Observable<T> last(Func1<? super T, Boolean> predicate)"),e(s)])])]),es,n("p",null,[n("a",ts,[a("public final Observable<T> skip(int count);"),e(s)])]),ps,os,ls,n("ul",null,[n("li",null,[n("p",null,[n("a",cs,[a("public final Observable<T> skip(long time, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",is,[a("public final Observable<T> skip(long time, TimeUnit unit, Scheduler scheduler);"),e(s)])])])]),rs,n("p",null,[n("a",us,[a("public final Observable<T> skipLast(int count);"),e(s)])]),n("p",null,[a("跳过前面指定数量或指定时间内的元素，只发射后面的元素。指定时间时会延迟源 "),n("a",ks,[a("Observable"),e(s)]),a(" 发射的任何数据。")]),ds,vs,n("ul",null,[n("li",null,[n("p",null,[n("a",bs,[a("public final Observable<T> skipLast(long time, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",ms,[a("public final Observable<T> skipLast(long time, TimeUnit unit, Scheduler scheduler);"),e(s)])])])]),hs,n("p",null,[n("a",gs,[a("public final Observable<T> take(final int count);"),e(s)])]),_s,fs,xs,n("ul",null,[n("li",null,[n("p",null,[n("a",Os,[a("public final Observable<T> take(long time, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Ts,[a("public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler);"),e(s)])])])]),js,n("p",null,[n("a",ys,[a("public final Observable<T> takeLast(final int count);"),e(s)])]),n("p",null,[a("只发射后面指定数量或指定时间内的元素。指定时间时会延迟源 "),n("a",Rs,[a("Observable"),e(s)]),a(" 发射的任何数据。")]),ws,Ss,n("ul",null,[n("li",null,[n("p",null,[n("a",Js,[a("public final Observable<T> takeLast(int count, long time, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Fs,[a("public final Observable<T> takeLast(int count, long time, TimeUnit unit, Scheduler scheduler);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Is,[a("public final Observable<T> takeLast(long time, TimeUnit unit);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Us,[a("public final Observable<T> takeLast(long time, TimeUnit unit, Scheduler scheduler);"),e(s)])])])]),Ls,n("p",null,[n("a",qs,[a("public final Observable<T> sample(long period, TimeUnit unit);"),e(s)])]),n("p",null,[a("定期发射 "),n("a",Es,[a("Observable"),e(s)]),a(" 发射的最后一条数据。")]),As,Ns,n("ul",null,[n("li",null,[n("p",null,[n("a",Cs,[a("public final Observable<T> sample(long period, TimeUnit unit, Scheduler scheduler);"),e(s)])])]),n("li",null,[n("p",null,[n("a",Bs,[a("public final <U> Observable<T> sample(Observable<U> sampler);"),e(s)])])])]),Ds,n("p",null,[n("a",Ms,[a("public final Observable<T> elementAt(int index);"),e(s)])]),Ps,n("p",null,[n("a",Ws,[a("public final Observable<T> elementAtOrDefault(int index, T defaultValue);"),e(s)])]),Vs,n("p",null,[n("a",zs,[a("public final Observable<T> ignoreElements();"),e(s)])]),Hs,n("p",null,[n("a",Xs,[a("public final Observable<T> distinct();"),e(s)])]),Ys,Gs,Ks,n("ul",null,[n("li",null,[n("a",Qs,[a("public final <U> Observable<T> distinct(Func1<? super T, ? extends U> keySelector)"),e(s)])])]),Zs,n("p",null,[n("a",$s,[a("public final Observable<T> debounce(long timeout, TimeUnit unit)"),e(s)])]),n("p",null,[a("源 "),n("a",ne,[a("Observable"),e(s)]),a(" 每产生结果后，如果在规定的间隔时间内没有产生新的结果，则发射这个结果，否则会忽略这个结果。该操作符会过滤掉发射速率过快的数据项。")]),ae,se,n("ul",null,[n("li",null,[n("p",null,[n("a",ee,[a("public final Observable<T> debounce(long timeout, TimeUnit unit, Scheduler scheduler)"),e(s)])])]),n("li",null,[n("p",null,[n("a",te,[a("public final <U> Observable<T> debounce(Func1<? super T, ? extends Observable<U>> debounceSelector)"),e(s)])])])]),pe])}const re=p(i,[["render",oe],["__file","RxJava 1.x：niyidinghuiyongdaodechangyongcaozuofu.html.vue"]]);export{re as default};
