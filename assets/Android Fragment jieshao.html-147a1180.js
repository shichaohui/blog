import{_ as e,p as t,q as c,s as n,R as a,t as o,Y as p,n as i}from"./framework-a25df3d5.js";const l={},d={href:"https://shichaohui.github.io/",target:"_blank",rel:"noopener noreferrer"},r=p(`<h2 id="fragment-简介" tabindex="-1"><a class="header-anchor" href="#fragment-简介" aria-hidden="true">#</a> Fragment 简介</h2><p><code>Fragment</code> 为大量不同型号、尺寸、分辨率的设备提供了一种统一的UI优化方案。</p><p><code>Fragment</code> 允许将 <code>Activity</code> 拆分成多个完全独立封装的可重用的组件，每个组件有它自己的生命周期。</p><p>每个 <code>Fragment</code> 都是独立的模块，并与它绑定的 <code>Activity</code> 紧密联系在一起。多个 <code>Activity</code> 可以共用一个 <code>Fragment</code> 。</p><p><code>Fragment</code> 展现了良好的适应性和动态构建 UI 的能力，可以在一个正在显示的 <code>Activity</code> 中添加、删除或替换 <code>Fragment</code> 。</p><h2 id="创建-fragment" tabindex="-1"><a class="header-anchor" href="#创建-fragment" aria-hidden="true">#</a> 创建 Fragment</h2><p>可以通过集成 <code>Fragment</code> 类来创建一个 <code>Fragment</code> ，大多数情况下需要为 <code>Fragment</code> 分配一个 UI，也可以为 <code>Activity</code> 创建一个没有UI但提供后台行为的 <code>Fragment</code> 。如果 <code>Fragment</code> 需要 UI，可以重新 <code>OnCreateView</code> 方法来填充并返回所需要的 <code>View</code>。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Fragment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">LayoutInflater</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">ViewGroup</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span>
            <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建或者填充Fragment的UI，并且返回它。</span>
        <span class="token comment">// 如果这个Fragment没有UI则返回null</span>
        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>my_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fragmentmanager-介绍" tabindex="-1"><a class="header-anchor" href="#fragmentmanager-介绍" aria-hidden="true">#</a> FragmentManager 介绍</h2><p>每个 <code>Activity</code> 都包含一个 <code>FragmentManager</code> 来管理它所包含的 <code>Fragment</code> 。可以通过使用 <code>getFragmentManager</code> 方法来访问 <code>FragmentManager</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FragMentManager</span> fragmentManager <span class="token operator">=</span> <span class="token function">getFragMentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>FragmentManager</code> 提供了很多方法来访问当前添加到 <code>Activity</code> 上的 <code>Fragment</code> 、通过执行 <code>FragmentManager</code> 来添加、删除和替换 <code>Fragment</code> 。</p><h2 id="向-activity-中添加-fragment" tabindex="-1"><a class="header-anchor" href="#向-activity-中添加-fragment" aria-hidden="true">#</a> 向 Activity 中添加 Fragment</h2><p>想要把一个 <code>Fragment</code> 添加到一个 <code>Activity</code> 中，最简单的方法是在 <code>Activity</code> 布局中使用 <code>fragment</code> 标签来包含它，如下所示：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vertical<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span> 
        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>包名.Fragment类名<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/my_fragment<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦一个 <code>Fragment</code> 被填充后，它就成为一个 <code>ViewGroup</code> ，会在 <code>Activity</code> 内显示和管理它所包含的 UI。</p><p>如果想要在运行时通过添加、删除或者替换 <code>Fragment</code> 的方式修改 UI，更好的方法是在布局文件中添加 <code>ViewGroup</code> 作为 <code>Fragment</code> 的容器，然后在代码中使用 <code>FragmentTransaction</code> 来创建相应的 <code>Fragment</code> 并添加到 <code>ViewGroup</code> 中。</p><h2 id="使用-fragmenttransaction" tabindex="-1"><a class="header-anchor" href="#使用-fragmenttransaction" aria-hidden="true">#</a> 使用 FragmentTransaction</h2><p>在程序运行时，<code>FragmentTransaction</code> 可以用来在一个 <code>Activity</code> 内添加、删除或替换 <code>Fragment</code> 。它同样也支持显示过渡动画的规范以及是否在 back 栈中包含 <code>Transaction</code> 。</p><p>一个新的 <code>FragmentTransaction</code> 是通过使用 <code>Activity</code> 的 <code>FragmentManager</code> 中的 <code>beginTransaction</code> 方法创建的。在设置显示动画之前，可以根据要求使用 <code>add</code> 、 <code>remove</code> 、和 <code>replace</code> 方法来修改布局，并设置恰当的 back 栈行为。当准备执行改变时，调用 <code>commit</code> 方法将事务添加到 UI 队列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FragmentTransaction</span> fragmentTransaction <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">// 添加、删除或者替换Fragment</span>
<span class="token comment">// 指定动画</span>
<span class="token comment">// 如果需要的话，添加到back栈中</span>
        
fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>commit()</code> 后,事务并不会马上执行。它会在 <code>activity</code> 的 UI 线程（其实就是主线程）中等待直到线程能执行的时候才执行（废话）。如果必要，可以在 UI 线程中调用 <code>fragmentManager.executePendingTransactions()</code> 方法来立即执行事务。</p><h2 id="添加、删除和替换-fragment" tabindex="-1"><a class="header-anchor" href="#添加、删除和替换-fragment" aria-hidden="true">#</a> 添加、删除和替换 Fragment</h2><p>添加一个新的 <code>UIFragment</code> 时，需要指定要添加的 <code>Fragment</code> 实例和将要放置它的容器 <code>View</code> 。另外，还可以为这个 <code>Fragment</code> 指定一个 <code>tag</code> 标识，后面通过这个标识，可以使用 <code>findFragmentByTag</code> 方法找到相应的 <code>Fragment</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加Fragment到容器View</span>
fragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>容器<span class="token class-name">View</span>的id<span class="token punctuation">,</span> <span class="token class-name">Fragment</span>实例<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加Fragment到容器View，并给Fragment指定tag</span>
fragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>容器<span class="token class-name">View</span>的id<span class="token punctuation">,</span> <span class="token class-name">Fragment</span>实例<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找 <code>Fragment</code> 通常可以通过 <code>FragmentManager</code> 的 <code>findFrafmentById</code> 或者 <code>findFragmentByTag</code> 方法来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Fragment</span> fragment_id <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentById</span><span class="token punctuation">(</span>fragment组件的id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Fragment</span> fragment_tag <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span><span class="token class-name">Fragment</span>实例的tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>想要删除一个 <code>Fragment</code> ，首先需要找到对这个 <code>Fragment</code> 的引用，然后把找到的 <code>Fragment</code> 实例作为参数传给 <code>FragmentTransaction</code> 的 <code>remove</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fragmentTransaction<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Fragment</span>实例<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了添加和删除操作外，还可以使用 <code>replace</code> 方法替换 <code>Fragment</code> ，指定要替换的 <code>Fragment</code> 的父容器的 <code>id</code>、一个新的 <code>Fragment</code> 和 <code>tag</code> 标识。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 替换容器View中的Fragment</span>
fragmentTransaction<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>容器<span class="token class-name">View</span>的id<span class="token punctuation">,</span> <span class="token class-name">Fragment</span>实例<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 替换容器View中的Fragment，并给新的Fragment指定tag</span>
fragmentTransaction<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>容器<span class="token class-name">View</span>的id<span class="token punctuation">,</span> <span class="token class-name">Fragment</span>实例<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 在添加、删除和替换操作之后，都需要调用 <code>fragmentTransaction.commit()</code> 方法提交事务</p><h2 id="fragment-back-栈的管理" tabindex="-1"><a class="header-anchor" href="#fragment-back-栈的管理" aria-hidden="true">#</a> Fragment back 栈的管理</h2><p>假设现在我们有两个 <code>Fragment</code>：Fragment01 和 Fragment02，我们现在从 Fragment01 的界面跳到 Fragment02，然后按 Back 键，发现程序是直接退出了，而不是返回到 Fragment01。如果现在想实现以下功能：从 Fragment01 的界面跳到 Fragment02，然后按 Back 键，会返回到 Fragment01。这个功能该怎么实现呢？这其实就利用到了返回栈的知识。</p><p>其实很简单，<code>FragmentTransaction</code> 中提供了一个 <code>addToBackStack()</code> 方法，可以将一个事务添加到返回栈中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FragmentManager</span> fragmentManager <span class="token operator">=</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FragmentTransaction</span> fragmentTransaction <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">// 添加、删除或者替换Fragment</span>
<span class="token comment">// 指定动画</span>
<span class="token comment">// 添加到back栈中，参数用于描述返回栈的状态，一般传null即可</span>
fragmentTransaction<span class="token punctuation">.</span><span class="token function">addToBackStack</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对-fragment-设置切换动画" tabindex="-1"><a class="header-anchor" href="#对-fragment-设置切换动画" aria-hidden="true">#</a> 对 Fragment 设置切换动画</h2><p><code>FragmentTransaction</code> 类中定义了一些默认的动画，可以对任何 <code>FragmentTransaction</code> 使用 <code>setTransition</code> 方法，并传入一个 <code>FragmentTransaction.TRANSIT_*</code> 常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fragmentTransaction<span class="token punctuation">.</span><span class="token function">setTransition</span><span class="token punctuation">(</span><span class="token class-name">FragmentTransaction</span><span class="token punctuation">.</span><span class="token constant">TRANSIT_FRAGMENT_OPEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以通过 <code>setCustomAnimations</code> 方法对 <code>FragmentTransaction</code> 设置自定义的动画：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fragmentTransaction<span class="token punctuation">.</span><span class="token function">setCustomAnimations</span><span class="token punctuation">(</span><span class="token class-name">Fragment</span>进入的动画资源id<span class="token punctuation">,</span> <span class="token class-name">Fragment</span>退出的动画资源id<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42);function u(m,k){const s=i("ExternalLinkIcon");return t(),c("div",null,[n("blockquote",null,[n("p",null,[n("small",null,[a("转载请注明出处，"),n("a",d,[a("点击此处"),o(s)]),a(" 查看更多精彩内容")])])]),r])}const v=e(l,[["render",u],["__file","Android Fragment jieshao.html.vue"]]);export{v as default};
