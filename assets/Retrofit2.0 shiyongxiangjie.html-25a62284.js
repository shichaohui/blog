import{_ as o,p,q as c,s as n,R as a,t as e,a0 as t,n as i}from"./framework-94b9cb5f.js";const l={},u={href:"https://github.com/square/retrofit",target:"_blank",rel:"noopener noreferrer"},r={href:"http://square.github.io/retrofit/",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),a(" 简介")],-1),k=n("code",null,"Retrofit",-1),v={href:"https://github.com/square",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Android",-1),h=n("code",null,"Java",-1),g=n("code",null,"Http",-1),b={href:"https://github.com/square/okhttp",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3460.html",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"使用-retrofit2-0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-retrofit2-0","aria-hidden":"true"},"#"),a(" 使用 Retrofit2.0")],-1),q={href:"http://repo1.maven.org/maven2/com/squareup/retrofit/retrofit/2.0.0-beta2/retrofit-2.0.0-beta2.jar",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="gradle" tabindex="-1"><a class="header-anchor" href="#gradle" aria-hidden="true">#</a> Gradle :</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>compile &#39;com.squareup.retrofit:retrofit:2.0.0-beta2&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="maven" tabindex="-1"><a class="header-anchor" href="#maven" aria-hidden="true">#</a> Maven :</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
  &lt;groupId&gt;com.squareup.retrofit&lt;/groupId&gt;
  &lt;artifactId&gt;retrofit&lt;/artifactId&gt;
  &lt;version&gt;2.0.0-beta2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用法介绍" tabindex="-1"><a class="header-anchor" href="#用法介绍" aria-hidden="true">#</a> 用法介绍</h2><p>转换 <code>HTTP API</code> 为 <code>Java</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GitHubService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;users/{user}/repos&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listRepos</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用类 <code>Retrofit</code> 生成接口 <code>GitHubService</code> 的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">GitHubService</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">GitHubService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以直接调用生成的 <code>GitHubServcie</code> 实例去发送同步或异步的请求给Web服务器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> repos <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">listRepos</span><span class="token punctuation">(</span><span class="token string">&quot;octocat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>baseUrl</code> 和注解中 <code>url</code> 连接的 <code>/</code> 最好写在 <code>baseUrl</code> 的后面，而不是注解中 <code>url</code> 的前面，否则可能会出现不可预知的错误。</p><h2 id="api-声明" tabindex="-1"><a class="header-anchor" href="#api-声明" aria-hidden="true">#</a> API 声明</h2><p>接口函数的注解和参数表明如何去处理请求</p><h3 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h3><p>每一个函数都必须有提供请求方式和相对 <code>URL</code> 的 <code>Http</code> 注解，<code>Retrofit</code> 提供了 5 种内置的注解：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 和 <code>HEAD</code>，在注解中指定的资源的相对 <code>URL</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;users/list&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在 <code>URL</code> 中指定查询参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@GET(&quot;users/list?sort=desc&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="url处理" tabindex="-1"><a class="header-anchor" href="#url处理" aria-hidden="true">#</a> URL处理</h3><p>请求的 <code>URL</code> 可以在函数中使用替换块和参数进行动态更新，替换块是 <code>{ and }</code> 包围的字母数字组成的字符串，相应的参数必须使用相同的字符串被 <code>@Path</code> 进行注释。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;group/{id}/users&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以添加查询参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;group/{id}/users&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂的查询参数可以使用 <code>Map</code> 进行组合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;group/{id}/users&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@QueryMap</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求体" tabindex="-1"><a class="header-anchor" href="#请求体" aria-hidden="true">#</a> 请求体</h3><p>可以通过 <code>@Body</code> 注解指定一个对象作为 <code>Http</code> 请求的请求体。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;users/new&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该对象将会被 <code>Retroofit</code> 实例指定的转换器转换，如果没有添加转换器，则只有 <code>RequestBody</code> 可用。（转换器的添加在后面介绍）</p><h3 id="form-encoded-和-multipart" tabindex="-1"><a class="header-anchor" href="#form-encoded-和-multipart" aria-hidden="true">#</a> FORM ENCODED 和 MULTIPART</h3><p>函数也可以声明为发送 <code>form-encoded</code> 和 <code>multipart</code> 数据。</p><p>当函数有 <code>@FormUrlEncoded</code> 注解的时候，将会发送 <code>form-encoded</code> 数据，每个键-值对都要被含有名字的 <code>@Field</code> 注解和提供值的对象所标注。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FormUrlEncoded</span>
<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;user/edit&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;first_name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;last_name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当函数有 <code>@Multipart</code> 注解的时候，将会发送 <code>multipart</code> 数据，Parts都使用 <code>@Part</code> 注解进行声明。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Multipart</span>
<span class="token annotation punctuation">@PUT</span><span class="token punctuation">(</span><span class="token string">&quot;user/photo&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">&quot;photo&quot;</span><span class="token punctuation">)</span> <span class="token class-name">RequestBody</span> photo<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span> <span class="token class-name">RequestBody</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Multipart</code> <code>parts</code> 要使用 <code>Retrofit</code> 的众多转换器之一或者实现 <code>RequestBody</code> 来处理自己的序列化。</p><h3 id="header处理" tabindex="-1"><a class="header-anchor" href="#header处理" aria-hidden="true">#</a> Header处理</h3><p>可以使用 <code>@Headers</code> 注解给函数设置静态的 <code>header</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control: max-age=640000&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;widget/list&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">widgetList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&quot;Accept: application/vnd.github.v3.full+json&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;User-Agent: Retrofit-Sample-App&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;users/{username}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：<code>header</code> 不能被互相覆盖。所有具有相同名字的 <code>header</code> 将会被包含到请求中。</p><p>可以使用 <code>@Header</code> 注解动态的更新一个请求的 <code>header</code>。必须给 <code>@Header</code> 提供相应的参数，如果参数的值为空 <code>header</code> 将会被忽略，否则就调用参数值的 <code>toString()</code> 方法并使用返回结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> authorization<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,44),R={href:"https://github.com/square/okhttp/wiki/Interceptors",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"header",-1),y=n("code",null,"Http",-1),w=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">networkInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Interceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span></span>Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span></span>Response</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Do anything with response here</span>

        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同步-vs-异步" tabindex="-1"><a class="header-anchor" href="#同步-vs-异步" aria-hidden="true">#</a> 同步 VS 异步</h3><p>每一个 <code>Call</code> 实例可以同步（<code>call.excute()</code>）或者异步（<code>call.enquene(CallBack&lt;?&gt; callBack</code>）的被执行，每一个实例仅仅能够被使用一次，但是可以通过 <code>clone()</code> 函数创建一个新的可用的实例。</p><p>也可以使用 <code>CallBack</code> 定义一个异步方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;user/{id}/photo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">getUserPhoto</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">Callback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Photo</span><span class="token punctuation">&gt;</span></span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Android</code> 上，回调被执行在主线程；在 <code>JVM</code> 上，回调被执行在发送 <code>Http</code> 请求的线程。</p><h2 id="retrofit-配置" tabindex="-1"><a class="header-anchor" href="#retrofit-配置" aria-hidden="true">#</a> Retrofit 配置</h2><p><code>Retrofit</code> 是通过 <code>API</code> 接口转换成的可调用的对象，默认有一些合理的配置，这些配置也可以进行定制。</p><h3 id="转换器" tabindex="-1"><a class="header-anchor" href="#转换器" aria-hidden="true">#</a> 转换器</h3><p>默认情况下，<code>Retrofit</code> 只能够反序列化 <code>Http</code> 体为 <code>OkHttp</code> 的 <code>ResponseBody</code> 类型，并且只能够接受 <code>ResponseBody</code> 类型的参数作为 <code>@body</code>。</p><p>添加转换器可以支持其他的类型，为了方便的适应流行的序列化库，<code>Retrofit</code> 提供了六个兄弟模块：</p>`,11),U={href:"https://github.com/google/gson",target:"_blank",rel:"noopener noreferrer"},P={href:"http://wiki.fasterxml.com/JacksonHome",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/square/moshi/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/square/wire",target:"_blank",rel:"noopener noreferrer"},C={href:"http://simple.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"},T=n("h3",{id:"自定义转换器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义转换器","aria-hidden":"true"},"#"),a(" 自定义转换器")],-1),G=n("code",null,"Retrofit",-1),L=n("code",null,"YAML",-1),A=n("code",null,"txt",-1),J=n("code",null,"API",-1),B={href:"https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"Retrofit",-1),O=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">RxJavaCallAdapterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用RxJava作为回调适配器</span>
        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">GsonConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用Gson作为数据转换器</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 [RxJava](https://github.com/ReactiveX/RxJava和 <code>Gson</code> 转换器需要添加依赖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Retrofit适配RxJava</span>
compile &#39;com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>retrofit<span class="token operator">:</span>adapter<span class="token operator">-</span>rxjava<span class="token operator">:</span><span class="token number">2.0</span><span class="token number">.0</span><span class="token operator">-</span>beta1&#39;
<span class="token comment">// Retrofit Gson数据转换器</span>
compile &#39;com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>retrofit<span class="token operator">:</span>converter<span class="token operator">-</span>gson<span class="token operator">:</span><span class="token number">2.0</span><span class="token number">.0</span><span class="token operator">-</span>beta1&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配合-rxjava-使用" tabindex="-1"><a class="header-anchor" href="#配合-rxjava-使用" aria-hidden="true">#</a> 配合 RxJava 使用</h2><p>在 <code>Rxjava</code> 下，你可以用 <code>Observable</code> 定义异步函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;user/{id}/photo&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Photo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserPhoto</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以做很多事情，不光可以获取数据还可以改变数据。</p><p><code>Retrofit</code> 支持 <code>Observable</code> 导致了将多个 <code>REST</code> 调用组合在一起变得简单了。例如，我们有一个调用去获取照片，第二个调用去获取原生数据，我们可以将结果一起打包。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>
    service<span class="token punctuation">.</span><span class="token function">getUserPhoto</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    service<span class="token punctuation">.</span><span class="token function">getPhotoMetadata</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>photo<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">createPhotoWithData</span><span class="token punctuation">(</span>photo<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>photoWithData <span class="token operator">-&gt;</span> <span class="token function">showPhoto</span><span class="token punctuation">(</span>photoWithData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>RxJava</code> + <code>Retrofit</code> 可以让多个 <code>REST</code> 调用组合成一个变得更简单。</p>`,10),M={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/ReactiveX/RxAndroid",target:"_blank",rel:"noopener noreferrer"},F=n("h4",{id:"rxjava-教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rxjava-教程","aria-hidden":"true"},"#"),a(" RxJava 教程")],-1),D={href:"http://gank.io/post/560e15be2dca930e00da1083#toc_12",target:"_blank",rel:"noopener noreferrer"},V={href:"http://blog.csdn.net/lzyzsd/article/details/41833541",target:"_blank",rel:"noopener noreferrer"},W={href:"http://blog.csdn.net/lzyzsd/article/details/44094895",target:"_blank",rel:"noopener noreferrer"},N={href:"http://blog.csdn.net/lzyzsd/article/details/44891933",target:"_blank",rel:"noopener noreferrer"},X={href:"http://blog.csdn.net/lzyzsd/article/details/45033611",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="retrofit-代码混淆配置" tabindex="-1"><a class="header-anchor" href="#retrofit-代码混淆配置" aria-hidden="true">#</a> Retrofit 代码混淆配置</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-dontwarn retrofit.**
-keep class retrofit.** { *; }
-keepattributes Signature
-keepattributes Exceptions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Y(K,Z){const s=i("ExternalLinkIcon");return p(),c("div",null,[n("p",null,[n("a",u,[a("Retrofit2.0 项目主页"),e(s)])]),n("p",null,[n("a",r,[a("Retrofit2.0 官方文档"),e(s)])]),d,n("p",null,[k,a(" 是由"),n("a",v,[a("Square公司"),e(s)]),a("出品的针对于 "),m,a(" 和 "),h,a(" 的类型安全的 "),g,a(" 客户端，网络服务基于"),n("a",b,[a("OkHttp"),e(s)]),a(" 。")]),n("p",null,[n("a",f,[a("Retrofit2.0: 有史以来最大的改进"),e(s)])]),_,n("p",null,[n("a",q,[a("下载 v2.0.0-beta2 JAR"),e(s)])]),x,n("p",null,[a("使用"),n("a",R,[a("OkHttp拦截器"),e(s)]),a("可以指定需要的 "),j,a(" 给每一个 "),y,a(" 请求。")]),w,n("ul",null,[n("li",null,[n("a",U,[a("Gson"),e(s)]),a(" : com.squareup.retrofit:converter-gson")]),n("li",null,[n("a",P,[a("Jackson"),e(s)]),a(": com.squareup.retrofit:converter-jackson")]),n("li",null,[n("a",E,[a("Moshi"),e(s)]),a(": com.squareup.retrofit:converter-moshi")]),n("li",null,[n("a",S,[a("Protobuf"),e(s)]),a(": com.squareup.retrofit:converter-protobuf")]),n("li",null,[n("a",H,[a("Wire"),e(s)]),a(": com.squareup.retrofit:converter-wire")]),n("li",null,[n("a",C,[a("Simple XML"),e(s)]),a(": com.squareup.retrofit:converter-simplexml")])]),T,n("p",null,[a("如果需要使用 "),G,a(" 不支持开箱即用的内容格式(如"),L,a("、"),A,a("、自定义格式)和 "),J,a(" 进行通信，或者想要使用不同的库实现已经存在的格式，你可以很方便的创建自己的转换器。创建方式：新建一个类继承"),n("a",B,[a("Converter.Factory"),e(s)]),a("类，并在构建 "),I,a(" 实例时传入转换器实例。")]),O,n("p",null,[n("a",M,[a("RxJava项目主页"),e(s)])]),n("p",null,[n("a",z,[a("RxAndroid项目主页"),e(s)])]),F,n("ul",null,[n("li",null,[n("a",D,[a("给 Android 开发者的 RxJava 详解"),e(s)])]),n("li",null,[n("a",V,[a("深入浅出RxJava（一：基础篇）"),e(s)])]),n("li",null,[n("a",W,[a("深入浅出RxJava(二：操作符)"),e(s)])]),n("li",null,[n("a",N,[a("深入浅出RxJava三--响应式的好处"),e(s)])]),n("li",null,[n("a",X,[a("深入浅出RxJava四-在Android中使用响应式编程"),e(s)])])]),Q])}const nn=o(l,[["render",Y],["__file","Retrofit2.0 shiyongxiangjie.html.vue"]]);export{nn as default};
